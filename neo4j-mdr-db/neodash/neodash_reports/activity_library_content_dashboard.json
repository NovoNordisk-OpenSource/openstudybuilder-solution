{
  "title": "Activity Library Dashboard",
  "version": "2.4",
  "settings": {
    "pagenumber": 0,
    "editable": true,
    "fullscreenEnabled": false,
    "parameters": {
      "neodash_activity_name": "",
      "neodash_activity_name_display": "",
      "neodash_activityinstance_name": "",
      "neodash_activityinstance_name_display": "",
      "neodash_activitygroup_name_display": "",
      "neodash_activitysubgroup_name_display": "",
      "neodash_activityinstance_adam_param_code": "",
      "neodash_activityinstance_adam_param_code_display": "",
      "neodash_ctcodelist_submission_value": "",
      "neodash_ctcodelist_submission_value_display": "",
      "neodash_ctterm_nci_preferred_name": "",
      "neodash_ctterm_nci_preferred_name_display": "",
      "neodash_activityinstance_nci_preferred_name": "",
      "neodash_activityinstance_nci_preferred_name_display": "",
      "neodash_activityinstance_name_submission_value": "",
      "neodash_activityinstance_name_submission_value_display": "",
      "neodash_activity_instance": "",
      "undefined_display": "",
      "neodash_activitygroupvalue_name": "",
      "neodash_activitygroupvalue_name_display": "",
      "neodash_activitysubgroupvalue_adam_param_code": "",
      "neodash_activitysubgroupvalue_adam_param_code_display": "",
      "neodash_neodash_activity_instance": "",
      "neodash_cosmos_activity_instance": "",
      "neodash_activity_intance": "",
      "neodash_sdtmversion": "",
      "neodash_detail": "",
      "neodash_activitysubgroupvalue_name": "",
      "neodash_activitysubgroupvalue_name_display": "",
      "neodash_limit_list": "",
      "neodash_limit_list_display": "",
      "neodash_activityinstanceclassvalue_name": "",
      "neodash_activityinstanceclassvalue_name_display": "",
      "neodash_neodash_cosmos_activity": "",
      "neodash_cosmos_activity": "",
      "neodash_activity_instance_sdtm": "",
      "neodash_studyactivitysubgroup_name": "",
      "neodash_studyactivitysubgroup_name_display": "",
      "neodash_activityinstanceclassvalue_name_subtype": "",
      "neodash_activityinstanceclassvalue_name_subtype_display": "",
      "neodash_neodash_activitygroupvalue_name": "",
      "neodash_neodash_activitygroupvalue_name_display": "",
      "neodash_instance_display": "",
      "neodash_instance": "",
      "neodash_activity": "",
      "neodash_cosmos_instance": "",
      "neodash_sdtm_version": "",
      "neodash_ai": [],
      "neodash_ai_display": [],
      "neodash_operator": "OR",
      "neodash_operator_display": "OR",
      "neodash_study_act_select": 1213253,
      "neodash_study_activity": [
        "Triglycerides"
      ],
      "neodash_study_activity_display": [
        "Triglycerides"
      ],
      "neodash_show_latest": "Y",
      "neodash_show_latest_display": "Y"
    },
    "resizing": "bottom-right",
    "disableRowLimiting": false,
    "theme": "light",
    "queryTimeLimit": 120
  },
  "pages": [
    {
      "title": "ReadMe",
      "reports": [
        {
          "title": "Guide",
          "query": "**This report is for browsing Activity Concepts**\n\nIt displays the Activity Concepts (latest version) available in the StudyBuilder Library.\n\nFollow the tabs to see different views of the concepts.\n\nFor more information on activity concepts you can read this \n**[article on Biomedical Concepts/Activity Concepts](https://novo-nordisk.gitlab.io/nn-public/openstudybuilder/project-description/guide_activity_concept)**\n",
          "width": 20,
          "height": 3,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {
            "downloadImageEnabled": false,
            "replaceGlobalParameters": true
          },
          "id": "5774cad7-c3ac-4062-b917-fdbcef235e41"
        },
        {
          "id": "7f7a7cda-2fa3-413d-bac7-40bda540d74e",
          "title": "Number of Activities and Instances by group and subgroup",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),(act)<-[:LATEST]-()\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nreturn distinct agrp.name as `Activity Group`, \nasgrp.name as `Activity Sub-group`,\ncount(distinct act.name) as `Number of Activities`,\ncount(distinct ai.name) as `Number of Activity Instances`\n\n\n\n",
          "width": 10,
          "height": 6,
          "x": 0,
          "y": 7,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "compact": true,
            "wrapContent": true,
            "columnWidths": "[1,2,1.5,2]"
          }
        },
        {
          "id": "119873c7-f120-4db1-ac52-64d55a3bb120",
          "title": "Number of Activities and Instances by type and subtype",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),(act)<-[:LATEST]-()\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nOPTIONAL MATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nOPTIONAL MATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nreturn \naicp.name as `Activity Type`,\naic.name as `Activity Sub-Type`,\ncount(distinct ai.name) as `Number of Activity Instances`,\ncount(distinct act.name) as `Number of Activities`\n\n\n\n\n\n",
          "width": 10,
          "height": 6,
          "x": 10,
          "y": 7,
          "type": "table",
          "selection": {},
          "settings": {
            "transposed": false,
            "refreshButtonEnabled": true,
            "compact": true,
            "wrapContent": true,
            "columnWidths": "[1,2,2,1.5]"
          }
        },
        {
          "id": "e5b87c60-b072-4f8a-955a-9cc1e778f251",
          "title": "Number of Activities and instances",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(), (act)-[:LATEST]-()\nreturn count(distinct act) as `Number of Activities`,  count(distinct ai) as `Number of Activity Instances`\n\n\n\n",
          "width": 10,
          "height": 4,
          "x": 10,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "columnWidthsType": "Fixed (px)",
            "transposed": true
          },
          "schema": []
        },
        {
          "id": "1402a2c5-8cdf-406e-858d-96bc0bf0c933",
          "title": "Groupings of Activities",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),(act)<-[:LATEST]-()\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nwith aicp.name as ActivityType,\naic.name as ActivitySubType,\nagrp.name as ActivityGroup, \nasgrp.name as ActiviySubGroup,\n[aicp.name,aic.name,agrp.name,asgrp.name] as Grouping,\ncount(distinct act.name) as N_act\nreturn Grouping, N_act as Activities\n\n\n\n\n",
          "width": 10,
          "height": 4,
          "x": 0,
          "y": 3,
          "type": "circlePacking",
          "selection": {
            "index": "Grouping",
            "value": "Activities",
            "key": "(none)"
          },
          "settings": {
            "refreshButtonEnabled": true,
            "colors": "nivo",
            "cornerRadius": 30,
            "fullscreenEnabled": true,
            "enableArcLabels": false,
            "showLabels": false,
            "interactive": true
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Activity Lib (search top-down)",
      "reports": [
        {
          "title": "Activity Sub-group",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) \nwhere aicp.name = $neodash_activityinstanceclassvalue_name \nand aic.name =$neodash_activityinstanceclassvalue_name_subtype \nand agrp.name = $neodash_activitygroupvalue_name\nRETURN DISTINCT asgrp.`name` as value,  asgrp.`name` as display ORDER BY size(toString(value)) ASC",
          "width": 6,
          "height": 2,
          "x": 18,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "suggestionLimit": 10,
            "overridePropertyDisplayName": true,
            "entityType": "activitysubgroupvalue_name",
            "parameterName": "neodash_activitysubgroupvalue_name"
          },
          "id": "",
          "schema": []
        },
        {
          "title": "Number of Activities (Instances per Activity, when Sub-group is selected)",
          "query": "CALL apoc.case([not $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', \n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a]\nreturn aic.name as Category,\ncount(distinct act) as `Number of Activities` order by Category' , \nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', \n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue) where aic.name in [$b]\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a]\nreturn agrp.name as Category,\ncount(distinct act) as `Number of Activities` order by Category', \nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', \n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue) where agrp.name in [$c]\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue) where aic.name in [$b]\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a]\nreturn asgrp.name as Category,\ncount(distinct act) as `Number of Activities` order by Category',\nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='', \n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue) where agrp.name in [$c] and asgrp.name in[$d]\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue) where aic.name in [$b]\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name in [$a]\nreturn act.name as Category,\ncount(distinct ai) as `Number of Activities` order by Category'],\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue) \nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) \nreturn aicp.name as Category,\ncount(distinct act) as `Number of Activities` order by Category',\n{a:$neodash_activityinstanceclassvalue_name,\nb:$neodash_activityinstanceclassvalue_name_subtype,\nc:$neodash_activitygroupvalue_name, \nd:$neodash_activitysubgroupvalue_name}) YIELD value \nreturn value.Category as Category,\nvalue.`Number of Activities` as`Number of Activities/Instances` order by Category\n\n",
          "width": 24,
          "height": 6,
          "x": 0,
          "y": 4,
          "type": "bar",
          "selection": {
            "index": "Category",
            "value": "Number of Activities/Instances",
            "key": "(none)"
          },
          "settings": {
            "legend": false,
            "showOptionalSelections": false,
            "barValues": true,
            "layout": "vertical",
            "groupMode": "stacked",
            "positionLabel": "off",
            "hideSelections": true,
            "colors": "category10",
            "fullscreenEnabled": true,
            "refreshButtonEnabled": true,
            "valueScale": "linear",
            "labelSkipWidth": 20,
            "legendWidth": 150,
            "labelSkipHeight": 20,
            "marginBottom": 220,
            "marginTop": 30,
            "labelRotation": 45
          },
          "id": "0b69ad13-2fec-4978-92b5-0e9e8c7bcef4",
          "schema": []
        },
        {
          "title": "Activity Group",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) \nwhere aicp.name = $neodash_activityinstanceclassvalue_name \nand aic.name = $neodash_activityinstanceclassvalue_name_subtype \nRETURN DISTINCT agrp.`name` as value,  agrp.`name` as display ORDER BY size(toString(value)) ASC ",
          "width": 6,
          "height": 2,
          "x": 12,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "entityType": "activitygroupvalue_name",
            "multiSelector": false,
            "suggestionLimit": 30,
            "clearParameterOnFieldClear": false,
            "parameterName": "neodash_activitygroupvalue_name"
          },
          "id": "e7c9fe93-4718-4dd6-a412-bee1144ce5aa",
          "schema": []
        },
        {
          "title": "Activity Class",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) return distinct aicp.name as value,  aicp.`name` as display ORDER BY size(toString(value)) ASC ",
          "width": 6,
          "height": 2,
          "x": 0,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": false,
            "overridePropertyDisplayName": false,
            "entityType": "activityinstanceclassvalue_name",
            "manualPropertyNameSpecification": true,
            "parameterName": "neodash_activityinstanceclassvalue_name"
          },
          "id": "7cbece26-7894-4182-a84f-a6b12211dd5f",
          "schema": []
        },
        {
          "title": "Activity as a graph-view (logical view) - $neodash_activity",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)<-[:LATEST]-() where p_act.name=$neodash_activity\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nWITH g,p_act,p_ai,p_aicr,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH g,p_act,p_ai,p_aicr,ai,aic,\napoc.create.vRelationship(p_act,\"HAS\",{type:\"logical\"},ai) as r1,\napoc.create.vRelationship(ai,\"HAS_ACTIVITY\",{type:\"logical\"},g) as r2,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r3\nwith g,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3\nMATCH(p_act:ActivityValue)-[R3:HAS_GROUPING]->(g:ActivityGrouping)-[R4:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R5:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R6:IN_GROUP]->(p_agrp:ActivityGroupValue)\nwith g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3,R3,R4,R5,R6\nMATCH (p_ai:ActivityInstanceValue)-[R7:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nOPTIONAL MATCH(p_aitm1)<-[R9:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R10:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R11:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R12:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R13:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R14:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R17:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,r1,r2,r3,p_aitm1,p_aitmc1,p_aicp,p_aicpp,R3,R4,R5,R6,R15,R16,R17,\np_aitm1 as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R17 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,r1,r2,r3,aitm1,aitmc1,aicp,aicpp,R3,R4,R5,R6,R15,R16,R17,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R15 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r6,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r7,\nCASE WHEN (R17 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r8\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,R15,R16,R17\nOPTIONAL MATCH (p_aitm1)-[R18]->(p_ct2cd:CTTermRoot)-[R19:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R20:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R21:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R22:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,ct2,unit_ct,role,dtype,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r9, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r10,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r11,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r12\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_unitdef,ct2,unit_ct,role,dtype\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct g as g,\nsg as sg,\np_agrp as p_agrp ,\np_asgrp as p_asgrp,\np_act as p_act,\np_ai as p_ai,\nai as ai,\naic as aic,\naicp as aicp,\naicpp as aicpp,\naitm1 as aitm1,\naitmc1 as aitmc1,\nr1 as r1,\nr2 as r2,\nr3 as r3,\nr4 as r4,\nr5 as r5,\nr6 as r6,\nr7 as r7,\nr8 as r8,\nr9 as r9,\nr10 as r10,\nr11 as r11,\nr12 as r12,\nR3 as R3,\nR4 as R4,\nR5 as R5,\nR6 as R6,\np_ct2cd as p_ct2cd,\np_unitdefr as p_unitdefr,\nct2 as ct2,\nunit_ct as unit_ct,\nrole as role,\ndtype as dtype,\np_cl_cdisc as p_cl_cdisc,\np_cl_sponsor as p_cl_sponsor,\nunit_cld as unit_cld\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,p_cl_cdisc,p_cl_sponsor,unit_cld,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,cl,unit_cl,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r13,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r14\nRETURN g,sg,p_agrp,p_asgrp,p_act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,R3,R4,R5,R6,ct2,unit_ct,role,dtype,unit_cl,cl",
          "width": 12,
          "height": 6,
          "x": 0,
          "y": 18,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "(label)",
            "ActivityValidGroup": "(label)",
            "ActivityGroupValue": "name",
            "ConceptValue": "name",
            "TemplateParameterTermValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstance": "name",
            "ActivityInstanceClass": "name",
            "ActivityItem": "(label)",
            "ActivityItemClass": "name",
            "HAS": "(label)",
            "HAS_ACTIVITY": "(label)",
            "OF_CLASS": "(label)",
            "FOR": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_TYPE": "(label)",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "CTTerm": "name",
            "CTCodeList": "(label)"
          },
          "settings": {
            "nodePositions": {},
            "nodeColorScheme": "set3",
            "relationshipParticles": false,
            "hideSelections": true,
            "frozen": false,
            "refreshButtonEnabled": true,
            "rightClickToExpandNodes": false,
            "layout": "force-directed",
            "fullscreenEnabled": true,
            "downloadImageEnabled": true,
            "enableEditing": false,
            "showPropertiesOnHover": true,
            "autorun": true,
            "lockable": true,
            "defaultNodeSize": 3
          },
          "id": "7f8f6e8f-046f-45a7-a8da-cedcd6c8b537",
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "is_request_rejected",
              "name_sentence_case",
              "definition",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivityInstance",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "legacy_description",
              "is_required_for_activity",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClass",
              "name",
              "definition",
              "is_domain_specific",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClass",
              "name",
              "definition",
              "mandatory",
              "nci_concept_id",
              "order"
            ],
            [
              "HAS",
              "type"
            ],
            [
              "HAS_ACTIVITY",
              "type"
            ],
            [
              "OF_CLASS",
              "type"
            ],
            [
              "FOR",
              "type"
            ],
            [
              "HAS_ROLE",
              "type"
            ],
            [
              "HAS_TYPE",
              "type"
            ],
            [
              "HAS_GROUPING",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_SUBGROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "CTTerm",
              "preferred_term",
              "concept_id",
              "name",
              "code_submission_value",
              "name_sentence_case",
              "definition",
              "name_submission_value",
              "synonyms",
              "us_conventional_unit",
              "si_unit",
              "display_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "order",
              "legacy_code"
            ],
            [
              "CTCodeList",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ]
          ]
        },
        {
          "title": "Activity Sub-class",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nMATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue) where aicp.name = $neodash_activityinstanceclassvalue_name return distinct aic.`name` as value,  aic.`name` as display ORDER BY size(toString(value)) ASC ",
          "width": 6,
          "height": 2,
          "x": 6,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": false,
            "entityType": "activityinstanceclassvalue_name_subtype",
            "parameterName": "neodash_activityinstanceclassvalue_name_subtype",
            "multiline": false,
            "manualParameterSave": false
          },
          "id": "a5d49942-7b13-496b-9bfd-536eaf877be5",
          "schema": []
        },
        {
          "title": "Activity in tabular format - $neodash_activity",
          "query": "call apoc.when(not $neodash_activity='',\"MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name=$neodash_activity\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-()\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS 'SDTM') or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith distinct apoc.convert.toSet(collect(p_agrp.name)) as ActivityGroup,\napoc.convert.toSet(collect(p_asgrp.name))  as ActivitySubGroup,\np_act.name as Activity,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nWITH apoc.convert.toSet(apoc.coll.flatten(collect(ActivityGroup))) as ActivityGroup,\napoc.convert.toSet(apoc.coll.flatten(collect(ActivitySubGroup))) as ActivitySubGroup,\nActivity,\n`Activity Item Class`,\napoc.convert.toSet(collect(terms)) as Terms,\n`Code List`,\nRole,\n`Data Type`\nreturn ActivityGroup,\nActivitySubGroup,\nActivity,\n`Activity Item Class`,\nTerms,\n`Code List`,\nRole,\n`Data Type`\",\"match(x:blbla) return *\",{neodash_activity:$neodash_activity}) YIELD value\nreturn value.ActivityGroup as ActivityGroup,\nvalue.ActivitySubGroup as ActivitySubGroup,\nvalue.Activity as Activity,\nvalue.`Activity Item Class` as `Activity Item Class`,\nvalue.Terms as Terms,\nvalue.`Code List` as `Code List`,\nvalue.Role as Role,\nvalue.`Data Type` as `Data Type`",
          "width": 24,
          "height": 4,
          "x": 0,
          "y": 14,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "columnWidths": "[0.6,0.6,0.5,0.6,1,1,0.5,0.5]",
            "autorun": true,
            "wrapContent": true,
            "refreshButtonEnabled": true,
            "allowDownload": true
          },
          "id": "9b28167f-7b58-4d41-8122-5201a121613d",
          "schema": []
        },
        {
          "title": "Activity as a graph-view (physical view) - $neodash_activity",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name=$neodash_activity\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-()\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nreturn distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43",
          "width": 12,
          "height": 6,
          "x": 12,
          "y": 18,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "uid",
            "ActivityValidGroup": "uid",
            "ActivityGroupValue": "name",
            "ConceptValue": "name",
            "TemplateParameterTermValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstanceValue": "name",
            "ActivityInstanceClassRoot": "uid",
            "ActivityInstanceClassValue": "name",
            "ActivityItem": "name",
            "ActivityItemClassRoot": "uid",
            "ActivityItemClassValue": "name",
            "CTTermRoot": "uid",
            "CTTermNameRoot": "uid",
            "CTTermNameValue": "name",
            "CTTermAttributesRoot": "(label)",
            "CTTermAttributesValue": "(label)",
            "CTCodelistRoot": "uid",
            "CTCodelistAttributesRoot": "(label)",
            "CTCodelistNameRoot": "(label)",
            "CTCodelistNameValue": "name",
            "CTCodelistAttributesValue": "name",
            "TemplateParameterTermRoot": "uid",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "HAS_ACTIVITY": "(label)",
            "CONTAINS_ACTIVITY_ITEM": "(label)",
            "HAS_ACTIVITY_ITEM": "(label)",
            "LATEST": "(label)",
            "PARENT_CLASS": "(label)",
            "HAS_ITEM_CLASS": "(label)",
            "HAS_CT_TERM": "(label)",
            "HAS_NAME_ROOT": "(label)",
            "HAS_ATTRIBUTES_ROOT": "(label)",
            "HAS_TERM": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_DATA_TYPE": "(label)",
            "ACTIVITY_INSTANCE_CLASS": "(label)",
            "ConceptRoot": "uid",
            "UnitDefinitionRoot": "uid",
            "UnitDefinitionValue": "name",
            "HAS_CT_DIMENSION": "(label)"
          },
          "settings": {
            "hideSelections": true,
            "frozen": false,
            "nodePositions": {},
            "refreshButtonEnabled": true,
            "nodeColorScheme": "set3",
            "showPropertiesOnHover": true,
            "downloadImageEnabled": true,
            "fullscreenEnabled": true
          },
          "id": "823d3dfb-bce1-4719-9843-cb30524e20f6",
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "legacy_description",
              "is_required_for_activity",
              "is_legacy_usage",
              "us_conventional_unit",
              "si_unit",
              "display_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "order",
              "legacy_code"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "legacy_description",
              "is_required_for_activity",
              "is_legacy_usage",
              "us_conventional_unit",
              "si_unit",
              "display_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "order",
              "legacy_code"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "is_request_rejected",
              "name_sentence_case",
              "definition",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivityInstanceValue",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "legacy_description",
              "is_required_for_activity",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClassRoot",
              "uid"
            ],
            [
              "ActivityInstanceClassValue",
              "is_domain_specific",
              "name",
              "definition",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClassRoot",
              "uid"
            ],
            [
              "ActivityItemClassValue",
              "nci_concept_id",
              "name",
              "definition",
              "mandatory",
              "order"
            ],
            [
              "CTTermRoot",
              "uid",
              "concept_id"
            ],
            [
              "CTTermNameRoot",
              "uid"
            ],
            [
              "CTTermNameValue",
              "name",
              "name_sentence_case"
            ],
            [
              "CTTermAttributesRoot"
            ],
            [
              "CTTermAttributesValue",
              "preferred_term",
              "concept_id",
              "code_submission_value",
              "definition",
              "name_submission_value",
              "synonyms"
            ],
            [
              "CTCodelistRoot",
              "uid"
            ],
            [
              "CTCodelistAttributesRoot"
            ],
            [
              "CTCodelistNameRoot"
            ],
            [
              "CTCodelistNameValue",
              "name"
            ],
            [
              "CTCodelistAttributesValue",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ],
            [
              "TemplateParameterTermRoot",
              "uid"
            ],
            [
              "HAS_GROUPING",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_SUBGROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ACTIVITY",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "CONTAINS_ACTIVITY_ITEM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ACTIVITY_ITEM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "LATEST",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "PARENT_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ITEM_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_CT_TERM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_NAME_ROOT",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ATTRIBUTES_ROOT",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_TERM",
              "UNIQUE IMPORT ID REL",
              "author_id",
              "start_date",
              "order"
            ],
            [
              "HAS_ROLE",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_DATA_TYPE",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "ACTIVITY_INSTANCE_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "ConceptRoot",
              "uid"
            ],
            [
              "UnitDefinitionRoot",
              "uid"
            ],
            [
              "UnitDefinitionValue",
              "us_conventional_unit",
              "si_unit",
              "display_unit",
              "name",
              "master_unit",
              "comment",
              "definition",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "order",
              "legacy_code"
            ],
            [
              "HAS_CT_DIMENSION",
              "UNIQUE IMPORT ID REL"
            ]
          ]
        },
        {
          "id": "c1bb190a-b3a9-4e65-843d-c0ab8c42ba42",
          "title": "List of activities",
          "query": "CALL apoc.case([not $neodash_activityinstanceclassvalue_name='' \n               and $neodash_activityinstanceclassvalue_name_subtype='' \n               and $neodash_activitygroupvalue_name='' \n               and $neodash_activitysubgroupvalue_name='', \n\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] \n\nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity', \n\nnot $neodash_activityinstanceclassvalue_name='' \nand not $neodash_activityinstanceclassvalue_name_subtype='' \nand $neodash_activitygroupvalue_name='' \nand $neodash_activitysubgroupvalue_name='', \n\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] \n\nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity', \n\nnot $neodash_activityinstanceclassvalue_name='' \nand not $neodash_activityinstanceclassvalue_name_subtype='' \nand not $neodash_activitygroupvalue_name='' \nand $neodash_activitysubgroupvalue_name='', \n\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] and agrp.name in [$c] \n\nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity', \n\nnot $neodash_activityinstanceclassvalue_name='' \nand not $neodash_activityinstanceclassvalue_name_subtype='' \nand not $neodash_activitygroupvalue_name='' \nand not $neodash_activitysubgroupvalue_name='',\n\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] and agrp.name in [$c] and asgrp.name in [$d] \n\nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity'],\n\n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue) \nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity',{\na:$neodash_activityinstanceclassvalue_name,    \nb:$neodash_activityinstanceclassvalue_name_subtype,\nc:$neodash_activitygroupvalue_name, \nd:$neodash_activitysubgroupvalue_name}) YIELD value return value.ActivityType as `Activity Type`,value.ActivitySubType as `Activity Sub-Type`, value.ActivityGroup as `Activity Group` ,value.ActivitySubGroup as `Activity SubGroup` , value.Activity as Activity order by Activity",
          "width": 24,
          "height": 4,
          "x": 0,
          "y": 10,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "styleRules": [
              {
                "field": "",
                "condition": "=",
                "value": "",
                "customization": "row color",
                "customizationValue": "black"
              }
            ],
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Activity",
                "value": "Activity",
                "customization": "set variable",
                "customizationValue": "activity"
              }
            ],
            "compact": true,
            "wrapContent": true,
            "ignoreNonDefinedParams": false
          },
          "schema": []
        },
        {
          "id": "8b9b9231-f49e-4e1f-b181-7cfc040bf3a0",
          "title": "Guide",
          "query": "In the selection cards below, select from left to right to drill-down on the activities. \\\nI.e. select Finding in the left most drop-down to display the different sub-classes within Finding. \\\nThen select e.g. NumericFinding in the Sub-class to display count by Activity Group. Moving from left to right.\\\nSelection in all cards will provide number of Activity Instances for a given Activity in the selected Sub-group.\n\n\n",
          "width": 24,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {},
          "schema": []
        },
        {
          "id": "2a328d78-132e-49c6-b4a5-884d1fdaa015",
          "title": " Select instance of $neodash_activity",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-() \nwhere act.name = $neodash_activity \nreturn ai.name as Instance, ai.adam_param_code as `ADaM Param Code`",
          "width": 7,
          "height": 5,
          "x": 0,
          "y": 24,
          "type": "table",
          "selection": {},
          "settings": {
            "formFields": [
              {
                "type": "Node Property",
                "settings": {
                  "type": "Custom Query",
                  "entityType": "instance",
                  "parameterName": "neodash_instance"
                },
                "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue) \nwhere act.name = $neodash_activity return ai.name as Instance"
              }
            ],
            "runButtonText": "Show detail",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "ADaM Param Code",
                "value": "ADaM Param Code",
                "customization": "set variable",
                "customizationValue": "instance"
              }
            ],
            "wrapContent": true,
            "columnWidths": "[1,0.5]"
          },
          "schema": []
        },
        {
          "id": "bf2468d0-bf4e-4aa2-93e5-2f7e78ba4203",
          "title": "Instance detail - $neodash_instance",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-() where p_ai.adam_param_code = $neodash_instance\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) where p_ai.adam_param_code = $neodash_instance\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),(p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_aic.name as Class, \np_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_ai.name as Instance,\np_ai.adam_param_code as ADAM_CODE,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn distinct \nClass,\nInstance,\nADAM_CODE,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`\n\n\n",
          "width": 17,
          "height": 5,
          "x": 7,
          "y": 24,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "wrapContent": true
          },
          "schema": []
        },
        {
          "id": "0a3ffebe-ca79-43bb-a06b-46cb158e4d9d",
          "title": "Instance(logical view) - $neodash_instance",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)<-[:LATEST]-() \nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) where p_ai.adam_param_code=$neodash_instance\nWITH g,p_act,p_ai,p_aicr,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH g,p_act,p_ai,p_aicr,ai,aic,\napoc.create.vRelationship(p_act,\"HAS\",{type:\"logical\"},ai) as r1,\napoc.create.vRelationship(ai,\"HAS_ACTIVITY\",{type:\"logical\"},g) as r2,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r3\nwith g,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3\nMATCH(p_act:ActivityValue)-[R3:HAS_GROUPING]->(g:ActivityGrouping)-[R4:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R5:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R6:IN_GROUP]->(p_agrp:ActivityGroupValue)\nwith g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3,R3,R4,R5,R6\nMATCH (p_ai:ActivityInstanceValue)-[R7:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nOPTIONAL MATCH(p_aitm1)<-[R9:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R10:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R11:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R12:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R13:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R14:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R17:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,r1,r2,r3,p_aitm1,p_aitmc1,p_aicp,p_aicpp,R3,R4,R5,R6,R15,R16,R17,\np_aitm1 as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R17 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,r1,r2,r3,aitm1,aitmc1,aicp,aicpp,R3,R4,R5,R6,R15,R16,R17,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R15 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r6,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r7,\nCASE WHEN (R17 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r8\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,R15,R16,R17\nOPTIONAL MATCH (p_aitm1)-[R18]->(p_ct2cd:CTTermRoot)-[R19:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R20:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R21:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R22:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,ct2,unit_ct,role,dtype,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r9, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r10,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r11,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r12\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_unitdef,ct2,unit_ct,role,dtype\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct g as g,\nsg as sg,\np_agrp as p_agrp ,\np_asgrp as p_asgrp,\np_act as p_act,\np_ai as p_ai,\nai as ai,\naic as aic,\naicp as aicp,\naicpp as aicpp,\naitm1 as aitm1,\naitmc1 as aitmc1,\nr1 as r1,\nr2 as r2,\nr3 as r3,\nr4 as r4,\nr5 as r5,\nr6 as r6,\nr7 as r7,\nr8 as r8,\nr9 as r9,\nr10 as r10,\nr11 as r11,\nr12 as r12,\nR3 as R3,\nR4 as R4,\nR5 as R5,\nR6 as R6,\np_ct2cd as p_ct2cd,\np_unitdefr as p_unitdefr,\nct2 as ct2,\nunit_ct as unit_ct,\nrole as role,\ndtype as dtype,\np_cl_cdisc as p_cl_cdisc,\np_cl_sponsor as p_cl_sponsor,\nunit_cld as unit_cld\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,p_cl_cdisc,p_cl_sponsor,unit_cld,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,cl,unit_cl,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r13,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r14\nRETURN g,sg,p_agrp,p_asgrp,p_act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,R3,R4,R5,R6,ct2,unit_ct,role,dtype,unit_cl,cl\n\n\n",
          "width": 24,
          "height": 10,
          "x": 0,
          "y": 29,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "(label)",
            "ActivityValidGroup": "(label)",
            "ActivityGroupValue": "name",
            "ConceptValue": "name",
            "TemplateParameterTermValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstance": "name",
            "ActivityInstanceClass": "name",
            "ActivityItem": "(label)",
            "ActivityItemClass": "name",
            "HAS": "(label)",
            "HAS_ACTIVITY": "(label)",
            "OF_CLASS": "(label)",
            "FOR": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_TYPE": "(label)",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "CTTerm": "name",
            "CTCodeList": "name"
          },
          "settings": {
            "nodeColorScheme": "set3",
            "defaultNodeSize": 4,
            "showPropertiesOnHover": true,
            "hideSelections": true,
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true
          },
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "is_request_rejected",
              "name_sentence_case",
              "definition",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivityInstance",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "legacy_description",
              "is_required_for_activity",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClass",
              "name",
              "definition",
              "is_domain_specific",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClass",
              "name",
              "definition",
              "mandatory",
              "nci_concept_id",
              "order"
            ],
            [
              "HAS",
              "type"
            ],
            [
              "HAS_ACTIVITY",
              "type"
            ],
            [
              "OF_CLASS",
              "type"
            ],
            [
              "FOR",
              "type"
            ],
            [
              "HAS_ROLE",
              "type"
            ],
            [
              "HAS_TYPE",
              "type"
            ],
            [
              "HAS_GROUPING",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_SUBGROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "CTTerm",
              "preferred_term",
              "concept_id",
              "name",
              "code_submission_value",
              "name_sentence_case",
              "definition",
              "name_submission_value",
              "synonyms",
              "us_conventional_unit",
              "si_unit",
              "display_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "order",
              "legacy_code"
            ],
            [
              "CTCodeList",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ]
          ]
        }
      ]
    },
    {
      "title": "Activity Lib (search bottom-up)",
      "reports": [
        {
          "id": "eca14906-56b8-4481-8f2b-7dd0af5ab271",
          "title": "Search activity",
          "query": "MATCH (n:`ActivityValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 50",
          "width": 23,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activityvalue_name",
            "multiSelector": true,
            "overridePropertyDisplayName": false,
            "clearParameterOnFieldClear": true,
            "manualPropertyNameSpecification": false,
            "helperText": "Select one or more Activities",
            "suggestionLimit": 50
          },
          "schema": []
        },
        {
          "id": "e0a486e2-b652-4375-b36f-57acf318277c",
          "title": "Groups for selected activity/activities",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name in $neodash_activityvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)<-[:LATEST]-()\nreturn p_act.name as Activity,\np_agrp.name as Group,\np_asgrp.name as `Sub Group`,\np_ai.adam_param_code as `Activity Instance (ADAM PARAM CODE)`,\np_ai.topic_code as `Activity Instance (TOPIC CODE)`,\n'Show Detail' as Select order by Activity, Group, `Sub Group`",
          "width": 23,
          "height": 4,
          "x": 0,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": false,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Select",
                "value": "Activity Instance (ADAM PARAM CODE)",
                "customization": "set variable",
                "customizationValue": "detail"
              }
            ],
            "columnWidths": "[1,1,1,1,1,0.6]",
            "compact": true,
            "wrapContent": true,
            "noDataMessage": "Please select one or more activities in the search activity panel.",
            "ignoreNonDefinedParams": true
          },
          "schema": []
        },
        {
          "id": "51ddc5ee-2e17-44e1-99f1-8b2f95a8ba21",
          "title": "Activity Instance Detail - $neodash_detail",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-() where p_ai.adam_param_code=$neodash_detail\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_act.name as Activity,\np_ai.adam_param_code as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn ActivityGroup,\nActivitySubGroup,\nActivity,\n`Activity Instance`,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`",
          "width": 23,
          "height": 4,
          "x": 0,
          "y": 10,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "compact": true,
            "wrapContent": true,
            "noDataMessage": "Please select 'SHOW DETAIL' for one of the activity instances in the panel above.",
            "ignoreNonDefinedParams": true
          },
          "schema": []
        },
        {
          "id": "97dd35f9-9411-4b89-9bcd-9bdebdb027f0",
          "title": "Number of sub-groups for selected activity",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue) where act.name in $neodash_activityvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nwith distinct aicp.name as ActivityType,\naic.name as ActivitySubType,\nagrp.name as ActivityGroup, \nasgrp.name as ActiviySubGroup,\nact.name as activity,\n[agrp.name] as Groups,\n[asgrp.name] as SubGroups,\ncount(distinct asgrp.name) as N_subgroups,\ncount(distinct agrp.name) as N_groups\nreturn Groups,SubGroups,activity,N_groups,N_subgroups\n\n",
          "width": 11,
          "height": 4,
          "x": 12,
          "y": 2,
          "type": "bar",
          "selection": {
            "index": "activity",
            "value": "N_subgroups",
            "key": "SubGroups"
          },
          "settings": {
            "labelProperty": "SANKEY_UNWEIGHTED",
            "layout": "vertical",
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "colors": "set1",
            "showOptionalSelections": true,
            "legend": true,
            "groupMode": "stacked",
            "barValues": true,
            "marginBottom": 150,
            "legendWidth": 205,
            "positionLabel": "off",
            "hideSelections": true,
            "noDataMessage": "Please select one or more activities in the search activity panel.",
            "ignoreNonDefinedParams": true
          },
          "schema": []
        },
        {
          "id": "c39ce16b-7619-4118-b1e2-cc65efadd267",
          "title": "Number of groups for selected activity",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue) where act.name in $neodash_activityvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-(),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nMATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nwith distinct aicp.name as ActivityType,\naic.name as ActivitySubType,\nagrp.name as ActivityGroup, \nasgrp.name as ActiviySubGroup,\nact.name as activity,\n[agrp.name] as Groups,\n[asgrp.name] as SubGroups,\ncount(distinct asgrp.name) as N_subgroups,\ncount(distinct agrp.name) as N_groups\nreturn Groups,SubGroups,activity,N_groups,N_subgroups\n\n",
          "width": 12,
          "height": 4,
          "x": 0,
          "y": 2,
          "type": "bar",
          "selection": {
            "index": "activity",
            "value": "N_groups",
            "key": "Groups"
          },
          "settings": {
            "labelProperty": "SANKEY_UNWEIGHTED",
            "layout": "vertical",
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "colors": "set3",
            "showOptionalSelections": true,
            "legend": true,
            "groupMode": "stacked",
            "barValues": true,
            "marginBottom": 150,
            "legendWidth": 205,
            "positionLabel": "off",
            "hideSelections": true,
            "noDataMessage": "Please select one or more activities in the search activity panel.",
            "ignoreNonDefinedParams": true
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Activity to SDTM",
      "reports": [
        {
          "title": "Select SDTM version",
          "query": "match (n1:DataModelIGRoot{uid:'SDTMIG'})-[:HAS_VERSION]->(n:DataModelIGValue) return 'Select' as Click, n.name as IG, n.description as Description, n.effective_date as `Effective Date`, n.version_number as `Version Number` order by `Effective Date` desc\n\n",
          "width": 14,
          "height": 6,
          "x": 10,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "DataModelVersion",
            "propertyType": "version_number",
            "propertyTypeDisplay": "version_number",
            "parameterName": "neodash_datamodelversion_version_number",
            "suggestionLimit": 10,
            "clearParameterOnFieldClear": true,
            "columnWidths": "[1.4,1.5,6,1.5,1.5]",
            "refreshButtonEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Click",
                "value": "Version Number",
                "customization": "set variable",
                "customizationValue": "sdtmversion"
              }
            ],
            "compact": true,
            "wrapContent": true
          },
          "id": "2eb83ba7-a1ae-4d83-ac14-55a9d89e19d6",
          "schema": []
        },
        {
          "title": "Activity mapped to SDTM - $neodash_activity_instance_sdtm",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-() where p_ai.adam_param_code=$neodash_activity_instance_sdtm\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) \nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43\nMATCH (p_ai:ActivityInstanceValue)-[:CONTAINS_ACTIVITY_ITEM]->(p_aitm1_dom:ActivityItem)<-[:HAS_ACTIVITY_ITEM]-(:ActivityItemClassRoot)-[:MAPS_VARIABLE_CLASS]->(:VariableClass{uid:'DOMAIN'})-[:HAS_INSTANCE]->(:VariableClassInstance)<-[:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetVariableInstance)<-[:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetInstance)<-[:HAS_INSTANCE]-(p_ds:Dataset),(p_aitm1_dom:ActivityItem)-[x]->(y:CTTermRoot)-[:HAS_NAME_ROOT]->(:CTTermNameRoot)-[:LATEST]->(p_ct2_sponsor_dom), (y)-[:HAS_ATTRIBUTES_ROOT]->(:CTTermAttributesRoot)-[:LATEST]->(p_ct2_cdisc_dom)  where p_ds.uid=p_ct2_cdisc_dom.code_submission_value OPTIONAL MATCH(p_aitmc1r)-[R44:MAPS_VARIABLE_CLASS]->(p_varcl:VariableClass)-[R45:HAS_INSTANCE]->(p_varcli:VariableClassInstance)\n,(p_varcli)<-[R46:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dci:DatasetVariableInstance)<-[R47:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dsi:DatasetInstance)<-[R48:HAS_INSTANCE]-(p_ds:Dataset)<-[R49:HAS_DATASET]-(p_dmcat:DataModelCatalogue)-[R50:CONTAINS_VERSION]->(p_dmig:DataModelVersion),(p_dsi)<-[R51:HAS_DATASET]-(p_dmigv:DataModelIGValue)<-[R52:CONTAINS_DATA_MODEL_IG]-(p_dmig) where p_dmigv.version_number=$neodash_sdtmversion \nWITH distinct\np_act.name as Activity,\np_ai.name as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\np_varcl.uid as `Variable Class`,\np_dci.label as `SDTMIG Variable`,\np_dsi.label as `SDTMIG Dataset`,\np_aitmc1.order as item_order\nreturn Activity,`Activity Instance`,`Activity Item Class`,`Variable Class`,`SDTMIG Variable`,`SDTMIG Dataset` order by `Activity Instance`, item_order",
          "width": 24,
          "height": 6,
          "x": 0,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "wrapContent": true,
            "ignoreNonDefinedParams": false
          },
          "id": "030f513f-dc9d-4692-a08f-a136584db365",
          "schema": []
        },
        {
          "id": "0894bb17-3aaa-4c4a-9372-93e95422f362",
          "title": "Select Activity Instance",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_asgrp.name=$neodash_activitysubgroupvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)<-[:LATEST]-()\nreturn p_agrp.name as ActivityGroup, p_asgrp.name as ActivitySubGroup, p_act.name as Activity, p_ai.adam_param_code as ActivityInstance order by Activity\n",
          "width": 10,
          "height": 4,
          "x": 0,
          "y": 2,
          "type": "table",
          "selection": {},
          "settings": {
            "fontSize": 20,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "ActivityInstance",
                "value": "ActivityInstance",
                "customization": "set variable",
                "customizationValue": "activity_instance_sdtm"
              }
            ],
            "compact": true,
            "wrapContent": true,
            "columnWidths": "[1,1,1,0.8]",
            "refreshButtonEnabled": true,
            "ignoreNonDefinedParams": false
          },
          "schema": []
        },
        {
          "id": "93059873-3ac9-464e-bc2b-72f5fb9ddcdf",
          "title": "Activity with links to SDTM - $neodash_activity_instance_sdtm",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-() where p_ai.adam_param_code=$neodash_activity_instance_sdtm\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43\nMATCH (p_ai:ActivityInstanceValue)-[:CONTAINS_ACTIVITY_ITEM]->(p_aitm1_dom:ActivityItem)<-[:HAS_ACTIVITY_ITEM]-(:ActivityItemClassRoot)-[:MAPS_VARIABLE_CLASS]->(:VariableClass{uid:'DOMAIN'})-[:HAS_INSTANCE]->(:VariableClassInstance)<-[:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetVariableInstance)<-[:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetInstance)<-[:HAS_INSTANCE]-(p_ds:Dataset),(p_aitm1_dom:ActivityItem)-[x]->(y:CTTermRoot)-[:HAS_NAME_ROOT]->(:CTTermNameRoot)-[:LATEST]->(p_ct2_sponsor_dom), (y)-[:HAS_ATTRIBUTES_ROOT]->(:CTTermAttributesRoot)-[:LATEST]->(p_ct2_cdisc_dom)  where p_ds.uid=p_ct2_cdisc_dom.code_submission_value OPTIONAL MATCH(p_aitmc1r)-[R44:MAPS_VARIABLE_CLASS]->(p_varcl:VariableClass)-[R45:HAS_INSTANCE]->(p_varcli:VariableClassInstance)\n,(p_varcli)<-[R46:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dci:DatasetVariableInstance)<-[R47:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dsi:DatasetInstance)<-[R48:HAS_INSTANCE]-(p_ds:Dataset)<-[R49:HAS_DATASET]-(p_dmcat:DataModelCatalogue)-[R50:CONTAINS_VERSION]->(p_dmig:DataModelVersion),(p_dsi)<-[R51:HAS_DATASET]-(p_dmigv:DataModelIGValue)<-[R52:CONTAINS_DATA_MODEL_IG]-(p_dmig) where p_dmigv.version_number=$neodash_sdtmversion \nreturn distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,p_ds,p_varcl,p_varcli,p_dci,p_dsi,p_dmcat,p_dmig, p_dmigv,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52\n\n\n",
          "width": 24,
          "height": 8,
          "x": 0,
          "y": 12,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "uid",
            "ActivityValidGroup": "uid",
            "ActivityGroupValue": "name",
            "ConceptValue": "name",
            "TemplateParameterTermValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstanceValue": "name",
            "ActivityInstanceClassRoot": "uid",
            "ActivityInstanceClassValue": "name",
            "ActivityItem": "(label)",
            "ActivityItemClassRoot": "uid",
            "ActivityItemClassValue": "name",
            "CTTermRoot": "uid",
            "CTTermNameRoot": "uid",
            "CTTermNameValue": "name",
            "CTTermAttributesRoot": "(label)",
            "CTTermAttributesValue": "(label)",
            "CTCodelistRoot": "uid",
            "CTCodelistAttributesRoot": "(label)",
            "CTCodelistNameRoot": "(label)",
            "CTCodelistNameValue": "name",
            "CTCodelistAttributesValue": "name",
            "TemplateParameterTermRoot": "uid",
            "Dataset": "uid",
            "VariableClass": "uid",
            "VariableClassInstance": "title",
            "DatasetVariableInstance": "title",
            "DatasetInstance": "title",
            "DataModelCatalogue": "name",
            "DataModelVersion": "name",
            "DataModelIGValue": "name",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "HAS_ACTIVITY": "(label)",
            "CONTAINS_ACTIVITY_ITEM": "(label)",
            "HAS_ACTIVITY_ITEM": "(label)",
            "LATEST": "(label)",
            "PARENT_CLASS": "(label)",
            "HAS_CT_TERM": "(label)",
            "HAS_NAME_ROOT": "(label)",
            "HAS_ATTRIBUTES_ROOT": "(label)",
            "HAS_TERM": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_DATA_TYPE": "(label)",
            "ACTIVITY_INSTANCE_CLASS": "(label)",
            "MAPS_VARIABLE_CLASS": "(label)",
            "HAS_INSTANCE": "(label)",
            "IMPLEMENTS_VARIABLE": "(label)",
            "HAS_DATASET_VARIABLE": "(label)",
            "HAS_DATASET": "(label)",
            "CONTAINS_VERSION": "(label)",
            "CONTAINS_DATA_MODEL_IG": "(label)",
            "HAS_ITEM_CLASS": "(label)"
          },
          "settings": {
            "frozen": false,
            "nodePositions": {},
            "defaultNodeSize": 4,
            "showPropertiesOnHover": false,
            "allowDownload": false,
            "hideSelections": true,
            "refreshButtonEnabled": true
          },
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_request_rejected",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "is_request_rejected",
              "name_sentence_case",
              "definition",
              "is_request_final",
              "is_data_collected",
              "is_multiple_selection_allowed"
            ],
            [
              "ActivityInstanceValue",
              "topic_code",
              "is_derived",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClassRoot",
              "uid"
            ],
            [
              "ActivityInstanceClassValue",
              "is_domain_specific",
              "name",
              "definition",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClassRoot",
              "uid"
            ],
            [
              "ActivityItemClassValue",
              "nci_concept_id",
              "name",
              "definition",
              "mandatory",
              "order"
            ],
            [
              "CTTermRoot",
              "uid",
              "concept_id"
            ],
            [
              "CTTermNameRoot",
              "uid"
            ],
            [
              "CTTermNameValue",
              "name",
              "name_sentence_case"
            ],
            [
              "CTTermAttributesRoot"
            ],
            [
              "CTTermAttributesValue",
              "preferred_term",
              "concept_id",
              "synonyms",
              "code_submission_value",
              "definition",
              "name_submission_value"
            ],
            [
              "CTCodelistRoot",
              "uid"
            ],
            [
              "CTCodelistAttributesRoot"
            ],
            [
              "CTCodelistNameRoot"
            ],
            [
              "CTCodelistNameValue",
              "name"
            ],
            [
              "CTCodelistAttributesValue",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ],
            [
              "TemplateParameterTermRoot",
              "uid"
            ],
            [
              "Dataset",
              "uid"
            ],
            [
              "VariableClass",
              "uid"
            ],
            [
              "VariableClassInstance",
              "simple_datatype",
              "description",
              "label",
              "title",
              "role",
              "role_description"
            ],
            [
              "DatasetVariableInstance",
              "core",
              "role",
              "simple_datatype",
              "description",
              "label",
              "value_list",
              "title"
            ],
            [
              "DatasetInstance",
              "description",
              "label",
              "title"
            ],
            [
              "DataModelCatalogue",
              "data_model_type",
              "name"
            ],
            [
              "DataModelVersion",
              "uid",
              "implements_data_model",
              "registration_status",
              "effective_date",
              "name",
              "description",
              "href",
              "source",
              "label",
              "author_id",
              "import_date"
            ],
            [
              "DataModelIGValue",
              "name",
              "effective_date",
              "description",
              "version_number"
            ],
            [
              "HAS_GROUPING",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_SUBGROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IN_GROUP",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ACTIVITY",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "CONTAINS_ACTIVITY_ITEM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ACTIVITY_ITEM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "LATEST",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "PARENT_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_CT_TERM",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_NAME_ROOT",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ATTRIBUTES_ROOT",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_TERM",
              "UNIQUE IMPORT ID REL",
              "author_id",
              "start_date"
            ],
            [
              "HAS_ROLE",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_DATA_TYPE",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "ACTIVITY_INSTANCE_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "MAPS_VARIABLE_CLASS",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_INSTANCE",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "IMPLEMENTS_VARIABLE",
              "version_number",
              "UNIQUE IMPORT ID REL",
              "catalogue"
            ],
            [
              "HAS_DATASET_VARIABLE",
              "version_number",
              "UNIQUE IMPORT ID REL",
              "ordinal"
            ],
            [
              "HAS_DATASET",
              "UNIQUE IMPORT ID REL",
              "ordinal"
            ],
            [
              "CONTAINS_VERSION",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "CONTAINS_DATA_MODEL_IG",
              "UNIQUE IMPORT ID REL"
            ],
            [
              "HAS_ITEM_CLASS",
              "UNIQUE IMPORT ID REL"
            ]
          ]
        },
        {
          "id": "2f622816-92e9-4b7a-b0a9-e96f044f4aaf",
          "title": "Limit list of Activities",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 10,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivitySubGroupValue",
            "suggestionLimit": 20,
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitysubgroupvalue_name"
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Activity in COSMOS format",
      "reports": [
        {
          "title": "Select Activity",
          "query": "CALL apoc.when($neodash_limit_list='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-()\nreturn agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.name as `Instance Name`,ai.adam_param_code as ActivityInstance','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue) where asgrp.name in [$a] \nreturn agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.name as `Instance Name`, ai.adam_param_code as ActivityInstance ', {a:$neodash_limit_list}) YIELD value\nreturn distinct value.ActivityGroup as `Activity Group`,\nvalue.ActivitySubGroup as `Activity Sub-group`,\nvalue.Activity as Activity, 'click' as `Select Activity` order by Activity",
          "width": 16,
          "height": 4,
          "x": 8,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity_instance",
            "clearParameterOnFieldClear": true,
            "parameterName": "neodash_activity_instance",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Select Activity",
                "value": "Activity",
                "customization": "set variable",
                "customizationValue": "cosmos_activity"
              }
            ],
            "compact": true,
            "columnWidths": "[1,2,3,0.7]",
            "wrapContent": true
          },
          "id": "12f56131-56de-4ae8-84c2-1336842643e5",
          "schema": []
        },
        {
          "title": "Limit list (search Activity Sub Group)",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 100",
          "width": 8,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivitySubGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_limit_list",
            "clearParameterOnFieldClear": false,
            "suggestionLimit": 100
          },
          "id": "da467d2e-7244-4aea-9b10-1a9cf22e5367",
          "schema": []
        },
        {
          "title": "Selected Activity",
          "query": "return $neodash_cosmos_activity\n\n",
          "width": 8,
          "height": 2,
          "x": 0,
          "y": 2,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 20
          },
          "id": "e3ef405e-a126-4873-8006-5299fff510d4",
          "schema": []
        },
        {
          "id": "3d05187e-4292-40e2-a9dc-0ed8f0d54392",
          "title": "Activity as COSMOS SDTM datasetspecialization -$neodash_cosmos_instance",
          "query": "                MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n                (sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \n                MATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-(x) where p_ai.adam_param_code=$neodash_cosmos_instance\n                MATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\n                OPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\n                OPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\n                OPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\n                OPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\n                OPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\n                OPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \n                OPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\n                OPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\n                OPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\n                OPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\n                OPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot),(p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\n                OPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),(p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\n                WITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43\n                MATCH (p_ai:ActivityInstanceValue)-[:CONTAINS_ACTIVITY_ITEM]->(p_aitm1_dom:ActivityItem)<-[:HAS_ACTIVITY_ITEM]-(:ActivityItemClassRoot)-[:MAPS_VARIABLE_CLASS]->(:VariableClass{uid:'DOMAIN'})-[:HAS_INSTANCE]->(:VariableClassInstance)<-[:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtm_version}]-(:DatasetVariableInstance)<-[:HAS_DATASET_VARIABLE{version_number:$neodash_sdtm_version}]-(:DatasetInstance)<-[:HAS_INSTANCE]-(p_ds:Dataset),(p_aitm1_dom:ActivityItem)-[x]->(y:CTTermRoot)-[:HAS_NAME_ROOT]->(:CTTermNameRoot)-[:LATEST]->(p_ct2_sponsor_dom), (y)-[:HAS_ATTRIBUTES_ROOT]->(:CTTermAttributesRoot)-[:LATEST]->(p_ct2_cdisc_dom)  where p_ds.uid=p_ct2_cdisc_dom.code_submission_value OPTIONAL MATCH(p_aitmc1r)-[R44:MAPS_VARIABLE_CLASS]->(p_varcl:VariableClass)-[R45:HAS_INSTANCE]->(p_varcli:VariableClassInstance)\n                ,(p_varcli)<-[R46:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtm_version}]-(var:DatasetVariableInstance)<-[R47:HAS_DATASET_VARIABLE{version_number:$neodash_sdtm_version}]-(p_dsi:DatasetInstance)<-[R48:HAS_INSTANCE]-(p_ds:Dataset)<-[R49:HAS_DATASET]-(p_dmcat:DataModelCatalogue)-[R50:CONTAINS_VERSION]->(p_dmig:DataModelVersion),(p_dsi)<-[R51:HAS_DATASET]-(p_dmigv:DataModelIGValue)<-[R52:CONTAINS_DATA_MODEL_IG]-(p_dmig),(p_dmcat)-[:HAS_DATASET_VARIABLE]->(dsv:DatasetVariable)-[:HAS_INSTANCE]->(var) where p_dmigv.version_number=$neodash_sdtm_version \n                Optional match(s_ds)-[:HAS_DATASET_VARIABLE]->(s_sdv:SponsorModelDatasetVariableInstance)<-[:HAS_INSTANCE]-(dsv:DatasetVariable)-[:HAS_INSTANCE]->(p_dci)\n                with p_aic,p_ai,p_aitmc1,p_dmigv,p_ds, p_varcl,dsv,var,p_role_val,p_dtype_val,clr,p_cl_cdisc,p_cl_sponsor,p_ct2cd,p_ct2_cdisc, p_ct2_sponsor, p_unitdef.name as unit_ct,\n                split(split(p_unitdef.definition,'CDISC code: ')[1],'_x000D')[0] as unit_code, s_sdv where not p_aitmc1.name in ['unit_dimension','domain']\n                with p_aic,p_ai,p_aitmc1,p_dmigv, p_ds, p_varcl,dsv,var,p_role_val,p_dtype_val,clr,p_cl_cdisc,p_cl_sponsor,p_ct2cd,p_ct2_cdisc, p_ct2_sponsor,unit_ct,s_sdv,\n                CASE when p_ct2cd is not NULL THEN\n                CASE WHEN var.role='Topic' THEN\n                apoc.map.fromPairs([\n                  ['code',p_ct2cd.concept_id],\n                  ['submission_value',coalesce(p_ct2_cdisc.code_submission_value,toUpper(p_ct2_sponsor.name))],\n                  ['shortName',p_ct2_cdisc.preferred_term]\n                  ]) \n                  ELSE\n                  CASE WHEN p_varcl.uid=\"--TEST\" THEN\n                  apoc.map.fromPairs([\n                  ['code',p_ct2cd.concept_id],\n                  ['submission_value',coalesce(p_ct2_cdisc.preferred_term,toUpper(p_ct2_sponsor.name))]\n                  ]) \n                  ELSE\n                  apoc.map.fromPairs([\n                  ['code',p_ct2cd.concept_id],\n                  ['submission_value',coalesce(p_ct2_cdisc.code_submission_value,toUpper(p_ct2_sponsor.name))]\n                  ]) END\n                  END ELSE\n                  apoc.map.fromPairs([\n                  ['code',unit_code],\n                  ['submission_value',unit_ct]\n                  ])\n                  END as val_list\n                  WITH p_aic,p_ai,p_aitmc1,p_dmigv, p_ds, p_varcl,dsv,var,p_role_val,p_dtype_val,clr,p_cl_cdisc,p_cl_sponsor,s_sdv,collect(distinct val_list) as terms, \n                  { DATETIME:'datetime', FLOAT:'float', INTEGER:'integer', CTTERM:'text', TEXT:'text'} as dtype_map\n                  WITH p_aic,p_ai,p_aitmc1,p_dmigv, p_ds,p_varcl,dsv,s_sdv,var,p_role_val,[x IN ['Identifier', 'Qualifier', 'Timing', 'Topic'] WHERE var.role contains x][0] as role,p_dtype_val,dtype_map[toUpper(p_dtype_val.name)] as dtype,clr, p_cl_cdisc,p_cl_sponsor,terms,\n                  CASE WHEN var.role='Topic' THEN apoc.text.join([p_ds.uid,dsv.uid],'.') END as source,\n                      CASE WHEN clr is not NULL THEN\n                apoc.map.fromPairs([['conceptId',clr.uid],\n                                  ['href','https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+clr.uid],                  ['submissionValue',coalesce(p_cl_cdisc.submission_value,toUpper(p_cl_sponsor.name))]\n                                  ]) END as cdlist,\n                CASE WHEN size(terms)=1 THEN\n                apoc.map.fromPairs([\n                                  ['conceptId',terms[0]['code']],\n                                  ['value',terms[0]['submission_value']]\n                                  ]) \n                END as assignedTerms,\n                CASE WHEN size(terms)>1 THEN [ v in terms | v['submission_value']] END as valueList,\n                CASE when p_aitmc1.data_collection='Yes' THEN 'Collected' ELSE 'Not Collected' END as collected\n                WITH p_aic,p_ai, p_aitmc1,p_dmigv, p_ds,p_varcl,dsv,var,role,\n                p_dtype_val,dtype, assignedTerms, valueList,cdlist,source,terms,s_sdv,\n                CASE WHEN assignedTerms is not null THEN\n                        CASE WHEN var.role='Topic' and dsv.uid=cdlist['submissionValue'] THEN\n                          apoc.map.fromPairs( [\n                                                ['name', dsv.uid],\n                                                ['isNonStandard',false],\n                                                ['role',role],\n                                                ['dataType', dtype],\n                                                ['codelist',cdlist],\n                                                ['assignedTerm',assignedTerms],\n                                                ['originType', s_sdv.origin],\n                                                ['mandatoryVariable', p_aitmc1.mandatory],\n                                                ['mandatoryValue', p_aitmc1.mandatory]\n                                                ]) \n                        ELSE\n                        CASE WHEN p_varcl.uid='--TEST' and dsv.uid=cdlist['submissionValue'] THEN\n                            apoc.map.fromPairs( [\n                                                ['name', dsv.uid],\n                                                ['isNonStandard',false],\n                                                ['role',role],\n                                                ['dataType', dtype],\n                                                ['codelist',cdlist],\n                                                ['assignedTerm',assignedTerms],\n                                                ['originType', s_sdv.origin],\n                                                ['mandatoryVariable', p_aitmc1.mandatory],\n                                                ['mandatoryValue', p_aitmc1.mandatory]\n                                                ]) \n                        ELSE  \n                            CASE WHEN not p_varcl.uid contains 'TEST'  THEN \n                              apoc.map.fromPairs( [\n                                                ['name', dsv.uid],\n                                                ['dataElementConceptId',p_aitmc1.nci_concept_id],\n                                                ['isNonStandard',false],\n                                                ['role',role],\n                                                ['dataType', dtype],\n                                                ['codelist',cdlist],\n                                                ['assignedTerm',assignedTerms],\n                                                ['originType', s_sdv.origin],\n                                                ['mandatoryVariable', p_aitmc1.mandatory],\n                                                ['mandatoryValue', p_aitmc1.mandatory]\n                                                ]) END\n                        END END\n                    ELSE\n                        CASE WHEN valueList is not null THEN \n                            apoc.map.fromPairs( [\n                            ['name', dsv.uid],\n                            ['dataElementConceptId',p_aitmc1.nci_concept_id],\n                            ['isNonStandard',false],\n                            ['codelist',cdlist],\n                            ['valueList', valueList],\n                            ['role',role],\n                            ['originType', s_sdv.origin],\n                            ['mandatoryVariable', p_aitmc1.mandatory],\n                            ['mandatoryValue', p_aitmc1.mandatory]\n                            ]) \n                        ELSE   \n                            apoc.map.fromPairs( [\n                            ['name', dsv.uid],\n                            ['dataElementConceptId',p_aitmc1.nci_concept_id],\n                            ['isNonStandard',false],\n                            ['role',role],\n                            ['dataType', dtype],\n                            ['codelist',cdlist],\n                            ['valueList', valueList],\n                            ['originType', s_sdv.origin],\n                            ['mandatoryVariable', p_aitmc1.mandatory],\n                            ['mandatoryValue', p_aitmc1.mandatory]\n                            ]) \n                END\n                    END as dataElement,\n                CASE WHEN var.role='Topic' THEN assignedTerms['conceptId'] END as biomedicalConceptId,\n                p_ai.adam_param_code as datasetSpecializationId,\n                CASE WHEN var.role='Topic' THEN [ v in terms | v['shortName']][0] END as shortName  \n                WITH p_aic,p_ai,apoc.coll.toSet(collect(shortName))[0] as shortName,p_dmigv, p_ds,apoc.coll.toSet(collect(source))[0] as source,apoc.coll.toSet(collect(biomedicalConceptId))[0] as biomedicalConceptId, apoc.coll.toSet(collect(datasetSpecializationId))[0] as datasetSpecializationId , collect(distinct dataElement) as vars\n                WITH p_aic,p_ai,shortName,p_dmigv, p_ds,source,datasetSpecializationId,biomedicalConceptId,vars, \n                apoc.map.fromPairs([ \n                                    ['packageType','sdtm'],\n                                    ['datasetSpecializationId',datasetSpecializationId],\n                                    ['domain',p_ds.uid],\n                                    ['shortName',shortName],\n                                    ['source',source],\n                                    ['sdtmigStartVersion',p_dmigv.version_number],\n                                    ['sdtmigEndVersion',\"\"],\n                                    ['biomedicalConceptId',biomedicalConceptId],\n                                    ['variables',vars]\n                                    ]) as activity\n                return  activity",
          "width": 15,
          "height": 10,
          "x": 9,
          "y": 10,
          "type": "json",
          "selection": {},
          "settings": {
            "format": "yml",
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true
          },
          "schema": []
        },
        {
          "id": "e1e782e0-85ca-4787-914c-77c375562fd6",
          "title": "Select CDISC SDTM version",
          "query": "match (n1:DataModelIGRoot{uid:'SDTMIG'})-[:HAS_VERSION]->(n:DataModelIGValue) return 'Select' as Click, n.name as IG, n.effective_date as `Effective Date`, n.version_number as `Version Number` order by `Effective Date` desc\n\n\n",
          "width": 9,
          "height": 3,
          "x": 0,
          "y": 10,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Click",
                "value": "Version Number",
                "customization": "set variable",
                "customizationValue": "sdtm_version"
              }
            ],
            "compact": true,
            "wrapContent": false
          }
        },
        {
          "id": "4b986a7e-91bd-447e-9a23-41036b6795b6",
          "title": "Activity as COSMOS BC Concept - $neodash_cosmos_activity",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n        (sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name = $neodash_cosmos_activity\n        MATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-(x) \n        MATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\n        OPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\n        OPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\n        OPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\n        OPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\n        OPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\n        OPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \n        OPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\n        OPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\n        OPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\n        OPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)-[R29:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld), (unit_term:CTTermRoot)-[R30:HAS_NAME_ROOT]->(clattr3)-[:LATEST]->(unit_cld2)\n        OPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot),(p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\n        OPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),(p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\n        with distinct p_act.name as ActivityName, p_aic as aic, p_asgrp as asgrp, p_aitmc1 as aitmc1,p_ai as ai,p_unitdef as unit_ct,\n        CASE WHEN p_unitdefr is not null THEN p_unitdef ELSE CASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END END as ct2,\n        CASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\n        CASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\n        CASE WHEN p_unitdefr is not null THEN apoc.map.merge(properties(unit_cld),properties(unit_cld)) ELSE CASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END END as cl\n        WITH distinct ActivityName,aic,asgrp,aitmc1,ai,unit_ct,ct2,role,dtype,cl,\n        CASE WHEN aitmc1.name='concept_id' THEN ct2.concept_id ELSE \n        CASE WHEN aitmc1.name='test_name_code' THEN ct2.concept_id END END as conceptId,\n        CASE WHEN aitmc1.name='domain' THEN ct2.code_submission_value END as domain\n        with distinct ActivityName,aic,asgrp,aitmc1,ai,unit_ct,ct2,role,dtype,conceptId,domain,cl,\n        CASE when (apoc.any.property(aic,'name')='NumericFinding') THEN 'Quantitative' ELSE \n        CASE WHEN (apoc.any.property(aic,'name')='CategoricFinding') THEN 'Ordinal' ELSE 'Nominal' END END  as aiclass\n        WITH  conceptId, ActivityName, aiclass, asgrp.name as asgrp,  domain, aitmc1,unit_ct,ct2,role,dtype,cl,\n        collect(distinct(coalesce(ct2.code_submission_value,unit_ct.name))) as val_lst\n        WITH conceptId, ActivityName, aiclass, asgrp,domain,aitmc1,dtype.name_submission_value as dtype,apoc.coll.flatten(collect(val_lst)) as val_list,toInteger(aitmc1.order) as var_order,cl\n        with conceptId, ActivityName, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,cl\n        call apoc.load.json('https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/C82590?include=minimal%2CinverseAssociations') yield value\n        with distinct conceptId, ActivityName, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,cl,value['inverseAssociations'] as class_concepts\n        with conceptId, ActivityName, aiclass, asgrp,domain,dtype,cl,aitmc1,val_list,var_order,class_concepts,\n      {PERCENTAGE:\"Unit of Fraction\",\n      `RESPIRATORY RATE`:\"Unit Respiratory Rate\",\n       CONCENTRATION:\"Unit of Concentration\",\n      `U_IU Concentration`:\"Unit of Concentration\",\n       TEMPERATURE:\"Unit of Temperature\",\n       WEIGHT:\"Unit of Weight\",\n       PRESSURE:\"Unit of Pressure\",\n       FLOW:\"Unit of Flow Rate\",\n      `VOLUMETRIC FLOW RATE`:\"Unit of Volumetric Flow Rate\",\n      `CELL COUNT`:\"Unit of Cell Count\",\n       LENGTH:\"Unit of Length\",\n      `NO UNIT`:\"No Unit\",\n       TIME:\"Unit of Time\",\n      `BEAT RATE`:\"Unit of Beat Rate\"} as unit_dimension_dict,\n      { DATETIME:'datetime', FLOAT:'decimal', INTEGER:'integer', CTTERM:'string', TEXT:'string'} as dtype_map\n      WITH conceptId, ActivityName, aiclass, asgrp,domain,aitmc1,val_list,cl, var_order,class_concepts,unit_dimension_dict,dtype_map,\n        CASE WHEN aitmc1.name='standard_unit' THEN apoc.text.join(['Unit of',cl.code_submission_value],' ') ELSE \n        CASE WHEN aitmc1.name='unit_dimension' THEN unit_dimension_dict[apoc.text.join(val_list,'')] ELSE\n        CASE WHEN aitmc1.name='test_name_code' THEN \"Test Code\" ELSE \n        CASE WHEN aitmc1.name contains 'category' THEN 'Category' ELSE\n        CASE WHEN aitmc1.name='domain' THEN 'Submission Domain' ELSE\n        CASE WHEN aitmc1.name='specimen' THEN 'Biospecimen Type' ELSE\n        apoc.text.join([c in class_concepts WHERE toUpper(c.relatedName)=toUpper(aitmc1.name) | c.relatedName],'') \n        END END END END END END as aitmc1_term, dtype_map[dtype] as dtype\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,apoc.text.replace(aitmc1_term,\" \",\"%20\") as aitmc1_term\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,aitmc1_term\n        call apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/search?fromRecord=0&include=minimal&pageSize=10&term=\"+aitmc1_term+\"&type=match&value=term\") YIELD value\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order, value.concepts[0].code as item_concept_id,aitmc1_term\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,item_concept_id,aitmc1_term\n        call apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/search?fromRecord=0&include=minimal&pageSize=10&term=\"+aitmc1_term+\"&type=startsWith&value=term\") YIELD value\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order, item_concept_id, apoc.text.join([v in value.concepts | v.code],',') as alt_item_concept_id\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,\n        CASE WHEN item_concept_id is null and not alt_item_concept_id is null THEN alt_item_concept_id ELSE  item_concept_id END as item_concept_id\n        WITH conceptId, ActivityName,  aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,item_concept_id,\n        CASE WHEN item_concept_id is null THEN null ELSE 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+item_concept_id END as href\n        WITH distinct conceptId,ActivityName, aiclass, asgrp,  domain, aitmc1.name as aitmc1Name, apoc.text.join(collect(distinct dtype),',') as dtypes,apoc.coll.flatten(collect(val_list)) as val_list ,var_order,href,item_concept_id\n       with distinct conceptId,ActivityName,  aiclass, asgrp,domain,dtypes,aitmc1Name,val_list,var_order,href,item_concept_id\nwith distinct collect(conceptId) as conceptId, ActivityName,  aiclass, asgrp, collect(domain) as domain, collect(apoc.map.fromPairs([['dtypes',dtypes],['aitmc1Name',aitmc1Name],['val_list',val_list],['var_order',var_order],['href',href],['item_concept_id',item_concept_id]])) as var_map\nwith conceptId, \nActivityName, \napoc.coll.toSet(collect(aiclass)) as aiclass, \napoc.coll.toSet(collect(asgrp)) as asgrp, \napoc.coll.toSet(domain) as domain,\napoc.coll.toSet(apoc.coll.flatten(collect(var_map))) as var_maps\nwith conceptId, ActivityName, aiclass,asgrp, domain, var_maps\nUNWIND var_maps as var_map\nwith conceptId, ActivityName, aiclass,asgrp,domain,\nvar_map['dtypes'] as dtypes,\nvar_map['aitmc1Name'] as aitmc1Name,\nvar_map['val_list'] as val_list,\nvar_map['var_order'] as var_order,\nvar_map['href'] as href,\nvar_map['item_concept_id'] as item_concept_id\nWITH conceptId, ActivityName, aiclass,asgrp,domain,dtypes,aitmc1Name,apoc.coll.toSet(collect(href)) as href,apoc.coll.toSet(collect(item_concept_id)) as item_concept_id, apoc.coll.toSet(apoc.coll.flatten(collect(val_list))) as val_list, var_order\nWITH conceptId, ActivityName, aiclass,asgrp,domain,dtypes,aitmc1Name, href,item_concept_id, val_list, var_order where not aitmc1Name in ['domain','test_name_code','unit_dimension']\nWITH conceptId, ActivityName, aiclass,asgrp,domain,dtypes,aitmc1Name, \nCASE WHEN size(href)=0 THEN null ELSE  apoc.text.join(href,'') END as href,\nCASE WHEN size(item_concept_id)=0 THEN null ELSE apoc.text.join(item_concept_id,'') END as item_concept_id, \nval_list, var_order \nWITH conceptId, ActivityName, aiclass,asgrp,domain,\ncollect(apoc.map.fromPairs( [\n                            ['conceptId', item_concept_id],\n                            ['href', href],\n                            ['shortName', aitmc1Name],\n                            ['dataType',dtypes],\n                            ['exampleSet',val_list]\n                            ])) as vars\nWITH conceptId, ActivityName,aiclass,asgrp,domain, vars where size(conceptId)<2\nwith apoc.text.join(conceptId,',') as conceptId, \nActivityName,\naiclass, \nasgrp,\napoc.text.join(domain,';') as domain, \nvars\nWITH CASE when conceptId = \"\" THEN 'C17998' ELSE conceptId END as conceptId,ActivityName,aiclass, asgrp,domain,vars\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?limit=100&include=minimal\") YIELD value\nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars, value.name as conceptName\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"/parents\") YIELD value\nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars, conceptName,collect(value.code)[0] as parentConceptId\nCALL apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?include=definitions\") YIELD value \nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars,conceptName, parentConceptId, value, [def IN value.definitions where def.source=\"NCI\"] as def \nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars,conceptName, parentConceptId, def[0][\"definition\"] as conceptDefinition\nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars,conceptName, parentConceptId,conceptDefinition\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?include=synonyms\") YIELD value \nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars,conceptName,parentConceptId,conceptDefinition,value, apoc.coll.toSet([sym IN value.synonyms where sym.source=\"CDISC\" and sym.termType=\"PT\"| sym.name]) as conceptSynonyms\nWITH conceptId, ActivityName, aiclass,asgrp,domain, apoc.coll.sortMaps(vars, '^var_order') as vars,conceptName,parentConceptId,conceptDefinition,conceptSynonyms\nWITH conceptId, ActivityName, aiclass,asgrp,domain, vars,conceptName,parentConceptId,conceptDefinition,conceptSynonyms,\napoc.map.fromPairs([ \n                   ['packageDate',toString(date())],\n                   ['packageType','bc'],\n                   ['conceptId',conceptId],\n                   ['href', 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+conceptId],\n                   ['parentConceptId',parentConceptId],\n                   ['category',asgrp],\n                   ['shortName',conceptName],\n                   ['activityName',ActivityName],\n                   ['synonym',conceptSynonyms],\n                   ['resultScale',aiclass],\n                   ['definition',conceptDefinition],\n                   ['domain',domain],\n                   ['dataElementConcepts', vars]\n                   ]) as activity\n        return distinct activity\n\n\n",
          "width": 24,
          "height": 6,
          "x": 0,
          "y": 4,
          "type": "json",
          "selection": {},
          "settings": {
            "format": "yml",
            "fullscreenEnabled": true,
            "refreshButtonEnabled": true,
            "downloadImageEnabled": false
          },
          "schema": []
        },
        {
          "id": "1b17908f-5b7f-41e5-a4dc-735c9cf356b2",
          "title": "Select Instance",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)<-[:LATEST]-() \nwhere act.name = $neodash_cosmos_activity \nreturn ai.name as Instance, ai.adam_param_code as `ADaM Param Code`\n\n\n",
          "width": 9,
          "height": 4,
          "x": 0,
          "y": 13,
          "type": "table",
          "selection": {},
          "settings": {
            "actionsRules": [
              {
                "condition": "Click",
                "field": "ADaM Param Code",
                "value": "ADaM Param Code",
                "customization": "set variable",
                "customizationValue": "cosmos_instance"
              }
            ],
            "compact": true,
            "wrapContent": true,
            "columnWidths": "[1,0.3]"
          }
        }
      ]
    },
    {
      "title": "Activities used in Studies",
      "reports": [
        {
          "id": "828b7787-ecf9-46d1-b5f8-3f376455f963",
          "title": "Select one or more Activities",
          "query": "MATCH (n:`ActivityValue`)\nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC ",
          "width": 8,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "multiSelector": true,
            "manualParameterSave": true,
            "manualPropertyNameSpecification": true,
            "entityType": "study_activity",
            "parameterName": "neodash_study_activity",
            "suggestionLimit": 1000,
            "clearParameterOnFieldClear": false,
            "multiline": false,
            "multiSelectLimit": 50
          },
          "schema": []
        },
        {
          "id": "4e8ce189-76c4-4e7d-847a-06db57caab1a",
          "title": "Studies using selected activities - select study",
          "query": "call apoc.case([$neodash_operator='OR' and size($neodash_study_activity)>0 and $neodash_show_latest='Y',\n\"MATCH(act:ActivityValue)<-[r1:HAS_SELECTED_ACTIVITY]-(sa:StudyActivity)<-[r2:HAS_STUDY_ACTIVITY]-(s:StudyValue) where act.name in $a\nmatch(sr:StudyRoot)-[r0:HAS_VERSION]->(s:StudyValue)\nwith r0, s,collect(distinct act.name) as Activities, CASE WHEN s.subpart_id is not null THEN s.study_id_prefix+'-'+s.study_number+'-'+s.subpart_id ELSE s.study_id_prefix+'-'+s.study_number END as trialid\nwith s, Activities,trialid \nmatch (sr:StudyRoot)-[r0:HAS_VERSION]->(s)\nOPTIONAL MATCH (sr)-[r1:LATEST]->(s)\noptional match(s)<-[r:AFTER]-(sact:StudyAction)\nwith distinct s,Activities,trialid,sr.uid as StudyRoot, collect(r0.status) as statuses ,collect(r0.version) as versions, type(r1) as Latest,sact.date as date order by StudyRoot, sact.date\nwith s,Activities,StudyRoot, s.study_acronym as acronym, trialid, split(apoc.temporal.format(date, 'iso_local_date_time'),'.')[0] as Date, case when 'LOCKED' in statuses then 'LOCKED' else 'DRAFT' END as Status,\napoc.text.join(apoc.coll.toSet(versions),'') as Version,Latest where Latest='LATEST'\nreturn StudyRoot, trialid, acronym, Date, Version, Latest,Status, Activities, id(s) as sid\norder by trialid\",\n$neodash_operator='AND' and size($neodash_study_activity)>0 and $neodash_show_latest='Y',\n\"MATCH(act:ActivityValue)<-[r1:HAS_SELECTED_ACTIVITY]-(sa:StudyActivity)<-[r2:HAS_STUDY_ACTIVITY]-(s:StudyValue)\nwith s, collect(distinct act.name) as all_activities\nwith s, $a as Activities, all_activities where apoc.coll.containsAll(all_activities,$a) \nmatch(sr:StudyRoot)-[r0:HAS_VERSION]->(s:StudyValue)\nwith r0, s, Activities, CASE WHEN s.subpart_id is not null THEN s.study_id_prefix+'-'+s.study_number+'-'+s.subpart_id ELSE s.study_id_prefix+'-'+s.study_number END as trialid\nwith s, Activities,trialid \nmatch (sr:StudyRoot)-[r0:HAS_VERSION]->(s)\nOPTIONAL MATCH (sr)-[r1:LATEST]->(s)\noptional match(s)<-[r:AFTER]-(sact:StudyAction)\nwith distinct s,Activities,trialid,sr.uid as StudyRoot, collect(r0.status) as statuses ,collect(r0.version) as versions, type(r1) as Latest,sact.date as date order by StudyRoot, sact.date\nwith s,Activities,StudyRoot, s.study_acronym as acronym, trialid, split(apoc.temporal.format(date, 'iso_local_date_time'),'.')[0] as Date, case when 'LOCKED' in statuses then 'LOCKED' else 'DRAFT' END as Status,\napoc.text.join(apoc.coll.toSet(versions),'') as Version,Latest where Latest='LATEST'\nreturn StudyRoot, trialid, acronym, Date, Version, Latest,Status, Activities, id(s) as sid\norder by trialid\",\n$neodash_operator='OR' and size($neodash_study_activity)>0 and $neodash_show_latest='N',\n\"MATCH(act:ActivityValue)<-[r1:HAS_SELECTED_ACTIVITY]-(sa:StudyActivity)<-[r2:HAS_STUDY_ACTIVITY]-(s:StudyValue) where act.name in $a\nmatch(sr:StudyRoot)-[r0:HAS_VERSION]->(s:StudyValue)\nwith r0, s,collect(distinct act.name) as Activities, CASE WHEN s.subpart_id is not null THEN s.study_id_prefix+'-'+s.study_number+'-'+s.subpart_id ELSE s.study_id_prefix+'-'+s.study_number END as trialid\nwith s, Activities,trialid \nmatch (sr:StudyRoot)-[r0:HAS_VERSION]->(s)\nOPTIONAL MATCH (sr)-[r1:LATEST]->(s)\noptional match(s)<-[r:AFTER]-(sact:StudyAction)\nwith distinct s,Activities,trialid,sr.uid as StudyRoot, collect(r0.status) as statuses ,collect(r0.version) as versions, type(r1) as Latest,sact.date as date order by StudyRoot, sact.date\nwith s,Activities,StudyRoot, s.study_acronym as acronym, trialid, split(apoc.temporal.format(date, 'iso_local_date_time'),'.')[0] as Date, case when 'LOCKED' in statuses then 'LOCKED' else 'DRAFT' END as Status,\napoc.text.join(apoc.coll.toSet(versions),'') as Version,Latest \nreturn StudyRoot, trialid, acronym, Date, Version, Latest,Status, Activities, id(s) as sid\norder by trialid\",\n$neodash_operator='AND' and size($neodash_study_activity)>0 and $neodash_show_latest='N',\n\"MATCH(act:ActivityValue)<-[r1:HAS_SELECTED_ACTIVITY]-(sa:StudyActivity)<-[r2:HAS_STUDY_ACTIVITY]-(s:StudyValue)\nwith s, collect(distinct act.name) as all_activities\nwith s, $a as Activities, all_activities where apoc.coll.containsAll(all_activities,$a) \nmatch(sr:StudyRoot)-[r0:HAS_VERSION]->(s:StudyValue)\nwith r0, s, Activities, CASE WHEN s.subpart_id is not null THEN s.study_id_prefix+'-'+s.study_number+'-'+s.subpart_id ELSE s.study_id_prefix+'-'+s.study_number END as trialid\nwith s, Activities,trialid \nmatch (sr:StudyRoot)-[r0:HAS_VERSION]->(s)\nOPTIONAL MATCH (sr)-[r1:LATEST]->(s)\noptional match(s)<-[r:AFTER]-(sact:StudyAction)\nwith distinct s,Activities,trialid,sr.uid as StudyRoot, collect(r0.status) as statuses ,collect(r0.version) as versions, type(r1) as Latest,sact.date as date order by StudyRoot, sact.date\nwith s,Activities,StudyRoot, s.study_acronym as acronym, trialid, split(apoc.temporal.format(date, 'iso_local_date_time'),'.')[0] as Date, case when 'LOCKED' in statuses then 'LOCKED' else 'DRAFT' END as Status,\napoc.text.join(apoc.coll.toSet(versions),'') as Version,Latest \nreturn StudyRoot, trialid, acronym, Date, Version, Latest,Status, Activities, id(s) as sid\norder by trialid\"\n], \"return null\",{a:$neodash_study_activity}) YIELD value\nreturn value.StudyRoot as StudyRoot, \nvalue.trialid as `Trial ID`, \nvalue.acronym as Acronym, \nvalue.Date as Date, \nvalue.Version as Version, \nvalue.Latest as Latest,\nvalue.Status as Status, \nvalue.Activities as Activities, \nvalue.sid as __sid\n",
          "width": 16,
          "height": 4,
          "x": 8,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "wrapContent": true,
            "refreshButtonEnabled": true,
            "transposed": false,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Trial ID",
                "value": "__sid",
                "customization": "set variable",
                "customizationValue": "study_act_select"
              }
            ],
            "columnWidths": "[1,1.4,1,1,1,1,1.0]"
          }
        },
        {
          "id": "172b542c-1a10-4a90-b92d-6d952d606c0a",
          "title": "Operator",
          "query": "WITH ['AND','OR'] as operators UNWIND operators as operator\nWITH operator WHERE toLower(operator) CONTAINS toLower($input) \nRETURN DISTINCT operator as value,  operator as display ORDER BY display DESC\n\n\n\n",
          "width": 4,
          "height": 2,
          "x": 0,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "entityType": "Operator",
            "parameterName": "neodash_operator",
            "autoSelectFirstValue": true
          },
          "schema": []
        },
        {
          "id": "7eb534ff-bee8-40b8-8838-10c9beb94de6",
          "title": "Study selection",
          "query": "MATCH (s:StudyValue) where id(s) = $neodash_study_act_select \nWITH s, CASE WHEN s.subpart_id is not null THEN s.study_id_prefix+'-'+s.study_number+'-'+s.subpart_id ELSE s.study_id_prefix+'-'+s.study_number END as `Trial ID`\nreturn `Trial ID`\n\n",
          "width": 11,
          "height": 2,
          "x": 0,
          "y": 4,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 20,
            "backgroundColor": "lightyellow"
          },
          "schema": []
        },
        {
          "id": "0d47cf70-f4e9-4306-bfee-5b546d5eeaed",
          "title": "Study description",
          "query": "match (s)-[r1]->(txt:StudyField) where txt.field_name is not null and id(s)=toInteger($neodash_study_act_select)\noptional match (txt)-[r2]->(:CTTermRoot)-[r3:HAS_NAME_ROOT]->(:CTTermNameRoot)-[r4:LATEST]->(term)\noptional match (txt)-[r5]->(x)-[:LATEST]->(term2)\nwith distinct s,term, term2, apoc.text.capitalize(apoc.text.join(split(txt.field_name,'_'),' ')) as field ,txt.value as value\nwith s, field, value, term, collect(term2.name) as term2\nwith s, field, CASE WHEN term is not null then term.name else CASE WHEN size(term2)>0 then apoc.text.join(term2,',') ELSE value END END as value\nwith s, field,value where not field contains 'null value code'\nwith distinct field,value\nreturn field as `Study Field`,\nvalue as Value",
          "width": 13,
          "height": 8,
          "x": 11,
          "y": 4,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "compact": true,
            "wrapContent": true,
            "allowDownload": true
          }
        },
        {
          "id": "0c5e2df6-d65f-420b-9a35-f72c22dd2c38",
          "title": "Objectives/Endpoints",
          "query": "match(s:StudyValue) where id(s)=toInteger($neodash_study_act_select)\noptional match (s)-[r3]->(endp:StudyEndpoint)-[r3_1]->(endp_val:EndpointValue)\noptional match (s)-[r4]->(obj:StudyObjective)-[r4_1]->(obj_val:ObjectiveValue)\nmatch(endp)-[:STUDY_ENDPOINT_HAS_STUDY_OBJECTIVE]->(obj)\nwith s, obj, obj_val, endp, endp_val,\n'Obj '+toString(obj.order) + ' - Endp '+toString(endp.order) as Number,\nobj_val.name_plain as Objective, \nendp_val.name_plain as Endpoint\nreturn Number, Objective, Endpoint\n\n\n",
          "width": 11,
          "height": 6,
          "x": 0,
          "y": 6,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "compact": true,
            "wrapContent": true,
            "allowDownload": true
          }
        },
        {
          "id": "473fee31-bf53-421f-9e1e-553063c9d8aa",
          "title": "SoA",
          "query": "match(s:StudyValue) where id(s) = toInteger($neodash_study_act_select )\noptional match(s)-[:HAS_STUDY_VISIT]->(v:StudyVisit)\nwith s, v order by v.visit_number, v.short_visit_label\nwith s, collect(distinct v.short_visit_label) as vis_total\noptional match(s)-[:HAS_STUDY_VISIT]->(vis:StudyVisit)\noptional match(vis)-[:HAS_VISIT_NAME]->(vis_name_root)-[:HAS_VERSION]->(vis_name:VisitNameValue)\noptional match(vis)-[:STUDY_VISIT_HAS_SCHEDULE]->(schedule:StudyActivitySchedule)\noptional match (s)-[:HAS_STUDY_ACTIVITY_SCHEDULE]->(schedule),\n(schedule)<-[:STUDY_ACTIVITY_HAS_SCHEDULE]-(s_act:StudyActivity),\n(s_act)-[:HAS_SELECTED_ACTIVITY]->(act_val:ActivityValue),(s_act)-[:STUDY_ACTIVITY_HAS_STUDY_ACTIVITY_INSTANCE]->(ai_s:StudyActivityInstance)-[:HAS_SELECTED_ACTIVITY_INSTANCE]-(ai:ActivityInstanceValue),\n(ai)-[r1]->(g)<-[r2]-(act_val) where act_val.name in $neodash_study_activity\nwith distinct  schedule, ai.topic_code as TOPIC_CODE, vis_total, vis.short_visit_label as `Visit Short Label`,vis.visit_number as `Visit ID`\nwhere TOPIC_CODE is not null \nWith schedule,TOPIC_CODE, `Visit Short Label` as Visits  order by `Visit ID`, `Visit Short Label`, schedule.uid\nwith  Visits, collect(TOPIC_CODE) as `TOPIC CODES`\nreturn Visits, `TOPIC CODES`",
          "width": 24,
          "height": 8,
          "x": 0,
          "y": 12,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "transposed": true,
            "compact": true,
            "wrapContent": true,
            "allowDownload": true
          }
        },
        {
          "id": "1a373038-0fdc-4d48-a4b8-c95bdda225c2",
          "title": "Show only latest",
          "query": "WITH ['Y','N'] as operators UNWIND operators as operator\nWITH operator WHERE toLower(operator) CONTAINS toLower($input) \nRETURN DISTINCT operator as value,  operator as display ORDER BY display DESC\n\n\n\n",
          "width": 4,
          "height": 2,
          "x": 4,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "autoSelectFirstValue": true,
            "entityType": "Show latest",
            "parameterName": "neodash_show_latest"
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Search Activity Instance",
      "reports": [
        {
          "id": "6f9c5975-0be0-4f25-8a7d-f7f3584cec16",
          "title": "Select Activity Instance (one or more)",
          "query": "MATCH (n:`ActivityInstanceValue`)<-[:LATEST]-()\nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC",
          "width": 24,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "entityType": "ai",
            "parameterName": "neodash_ai",
            "multiSelector": true,
            "multiline": true
          },
          "schema": []
        },
        {
          "id": "a8d99ae6-9c80-44e5-b480-49e768f3732b",
          "title": "Detail of selected instances",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-() where p_ai.name in $neodash_ai\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_act.name as Activity,\np_ai.adam_param_code as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn \n`Activity Instance`,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`,\nActivity,\nActivitySubGroup,\nActivityGroup\n\n\n\n\n",
          "width": 24,
          "height": 7,
          "x": 0,
          "y": 2,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "wrapContent": true
          }
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {
    "advanced-charts": {
      "active": true
    },
    "styling": {
      "active": true
    },
    "active": true,
    "activeReducers": [
      "DASHBOARD/EXTENSIONS/QUERY_TRANSLATOR/"
    ],
    "query-translator": {
      "active": true,
      "modelProvider": "OpenAI",
      "settings": {
        "modelType": "gpt-3.5-turbo-16k"
      }
    },
    "actions": {
      "active": true
    },
    "forms": {
      "active": true
    }
  },
  "uuid": "f0cb123d-6812-4cfc-8c8f-2fa3c0ed1792"
}