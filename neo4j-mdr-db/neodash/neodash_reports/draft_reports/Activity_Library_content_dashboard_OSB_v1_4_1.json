{
  "title": "OpenStudyBuilder Activity Library Dashboard",
  "version": "2.3",
  "settings": {
    "pagenumber": 3,
    "editable": true,
    "fullscreenEnabled": false,
    "parameters": {
      "undefined": "",
      "neodash_has_name": "",
      "neodash_ctcodelist_name": "",
      "neodash_activity_name": "Diastolic Blood Pressure",
      "neodash_activity_name_display": "Diastolic Blood Pressure",
      "neodash_activityinstance_name": "BMI",
      "neodash_activityinstance_name_display": "BMI",
      "neodash_activitygroup_name_display": "",
      "neodash_activitysubgroup_name_display": "Body Measurements",
      "neodash_activityinstance_adam_param_code": "",
      "neodash_activityinstance_adam_param_code_display": "",
      "neodash_ctcodelist_submission_value": "NY",
      "neodash_ctcodelist_submission_value_display": "NY",
      "neodash_ctterm_nci_preferred_name": "",
      "neodash_ctterm_nci_preferred_name_display": "",
      "neodash_activityinstance_nci_preferred_name": "",
      "neodash_activityinstance_nci_preferred_name_display": "",
      "neodash_activityinstance_name_submission_value": "",
      "neodash_activityinstance_name_submission_value_display": "",
      "neodash_activity": "Apolipoprotein B",
      "neodash_activity_instance": "",
      "undefined_display": "",
      "neodash_activitygroupvalue_name": "",
      "neodash_activitygroupvalue_name_display": "",
      "neodash_activitysubgroupvalue_adam_param_code": "",
      "neodash_activitysubgroupvalue_adam_param_code_display": "",
      "neodash_neodash_activity_instance": "",
      "neodash_cosmos_activity_instance": "HDLP",
      "neodash_activity_intance": "",
      "neodash_sdtmversion": "3.2",
      "neodash_detail": "ALB",
      "neodash_activitysubgroupvalue_name": "Lipids",
      "neodash_activitysubgroupvalue_name_display": "Lipids",
      "neodash_limit_list": "Vital Signs",
      "neodash_limit_list_display": "Vital Signs",
      "neodash_db_select": "devclone",
      "neodash_db_select_display": "devclone",
      "neodash_activityinstanceclassvalue_name": "Finding",
      "neodash_activityinstanceclassvalue_name_display": "Finding",
      "neodash_activityinstanceclassvalue_name_subtype": "NumericFinding",
      "neodash_activityinstanceclassvalue_name_subtype_display": "NumericFinding",
      "neodash_neodash_cosmos_activity": "Cholesterol",
      "neodash_cosmos_activity": "Temperature",
      "neodash_activity_instance_sdtm": "ALP",
      "neodash_activityvalue_name": [
        "Albumin",
        "Systolic Blood Pressure"
      ],
      "neodash_activityvalue_name_display": [
        "Albumin",
        "Systolic Blood Pressure"
      ],
      "neodash_studyactivitysubgroup_name": "",
      "neodash_studyactivitysubgroup_name_display": ""
    },
    "resizing": "bottom-right",
    "disableRowLimiting": false,
    "theme": "light"
  },
  "pages": [
    {
      "title": "ReadMe",
      "reports": [
        {
          "title": "Hi there ðŸ‘‹",
          "query": "**This report is for browsing Activity Concepts**\n\nIt displays the Activity Concepts available in the OpenStudyBuilder Library.\n\nFollow the tabs to see different views of the concepts.\n\nFor more information on activity concepts you can read the OpenStudyBuilder \n[article on Biomedical Concepts/Activity Concepts](https://novo-nordisk.gitlab.io/nn-public/openstudybuilder/project-description/guide_activity_concept/).\n\nOpenStudyBuilder, Release 1.4.1\n",
          "width": 10,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "text",
          "selection": {},
          "settings": {
            "downloadImageEnabled": false,
            "replaceGlobalParameters": true
          },
          "id": "5774cad7-c3ac-4062-b917-fdbcef235e41"
        },
        {
          "id": "7f7a7cda-2fa3-413d-bac7-40bda540d74e",
          "title": "Number of Activities and Instances by group and subgroup",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nreturn distinct agrp.name as `Activity Group`, \nasgrp.name as `Activity Sub-group`,\ncount(distinct act.name) as `Number of Activities`,\ncount(distinct ai.name) as `Number of Activity Instances`\n\n\n\n",
          "width": 5,
          "height": 3,
          "x": 0,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true
          }
        },
        {
          "id": "119873c7-f120-4db1-ac52-64d55a3bb120",
          "title": "Number of Activities and Instances by type and subtype",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nOPTIONAL MATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nOPTIONAL MATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nreturn \naicp.name as `Activity Type`,\naic.name as `Activity Sub-Type`,\ncount(distinct act.name) as `Number of Activities`,\ncount(distinct ai.name) as `Number of Activity Instances`\n\n\n\n\n\n",
          "width": 5,
          "height": 3,
          "x": 5,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {
            "transposed": false,
            "refreshButtonEnabled": true
          }
        },
        {
          "id": "e5b87c60-b072-4f8a-955a-9cc1e778f251",
          "title": "Number of Activities and instances",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nreturn count(distinct act) as `Number of Activities`, count(distinct ai) as `Number of Activity Instances`\n\n\n\n",
          "width": 5,
          "height": 2,
          "x": 5,
          "y": 1,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "allowDownload": true,
            "columnWidthsType": "Fixed (px)",
            "transposed": true
          },
          "schema": []
        },
        {
          "id": "1402a2c5-8cdf-406e-858d-96bc0bf0c933",
          "title": "Groupings of Activities",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nOPTIONAL MATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nwith aicp.name as ActivityType,\naic.name as ActivitySubType,\nagrp.name as ActivityGroup, \nasgrp.name as ActiviySubGroup,\n[aicp.name,aic.name,agrp.name,asgrp.name] as Grouping,\ncount(ai.name) as N_inst,\ncount(act.name) as N_act\nreturn Grouping, N_act as Activities, N_inst as Instances\n\n\n\n\n",
          "width": 5,
          "height": 2,
          "x": 0,
          "y": 1,
          "type": "sunburst",
          "selection": {
            "index": "Grouping",
            "value": "Activities",
            "key": "(none)"
          },
          "settings": {
            "refreshButtonEnabled": true,
            "colors": "pastel2",
            "cornerRadius": 30,
            "fullscreenEnabled": true
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Activity Lib (search top-down)",
      "reports": [
        {
          "title": "Activity Sub-group",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 10",
          "width": 3,
          "height": 1,
          "x": 9,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "suggestionLimit": 10,
            "overridePropertyDisplayName": true,
            "entityType": "ActivitySubGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitysubgroupvalue_name"
          },
          "id": "890d4206-667f-4a93-838b-9ab51a38db45",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Number of Activities (latest version) by groups",
          "query": "MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue)\nOPTIONAL MATCH (ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue)\nOPTIONAL MATCH (aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue)\nreturn aicp.name as `Activity Type`,\naic.name as `Activity Sub-Type`,\nagrp.name as `Activity Group`, \ncount(distinct ai) as `Number of Activity Instances`,\ncount(distinct act) as `Number of Activities`",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 0,
          "type": "bar",
          "selection": {
            "index": "Activity Sub-Type",
            "value": "Number of Activities",
            "key": "Activity Group"
          },
          "settings": {
            "legend": true,
            "showOptionalSelections": true,
            "barValues": false,
            "layout": "vertical",
            "groupMode": "stacked",
            "positionLabel": "off",
            "hideSelections": false,
            "colors": "paired",
            "fullscreenEnabled": true,
            "labelSkipHeight": 0,
            "labelSkipWidth": 2,
            "refreshButtonEnabled": true,
            "labelRotation": 0,
            "legendWidth": 200,
            "valueScale": "linear"
          },
          "id": "0b69ad13-2fec-4978-92b5-0e9e8c7bcef4",
          "schema": [],
          "database": "mdrdb14"
        },
        {
          "title": "Activity Group",
          "query": "MATCH (n:`ActivityGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 10",
          "width": 3,
          "height": 1,
          "x": 6,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "suggestionLimit": 10,
            "entityType": "ActivityGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitygroupvalue_name"
          },
          "id": "e7c9fe93-4718-4dd6-a412-bee1144ce5aa",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Activity Parent Class",
          "query": "MATCH (p_aicr:ActivityInstanceClassRoot)-[:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[:LATEST]->(n:ActivityInstanceClassValue) where not (:ActivityInstanceClassRoot)-[:PARENT_CLASS]->(p_aicr:ActivityInstanceClassRoot) and toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 3,
          "height": 1,
          "x": 0,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": false,
            "overridePropertyDisplayName": false,
            "entityType": "activityinstanceclassvalue_name",
            "manualPropertyNameSpecification": true,
            "parameterName": "neodash_activityinstanceclassvalue_name"
          },
          "id": "7cbece26-7894-4182-a84f-a6b12211dd5f",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Activity as a graph-view (logical view)",
          "query": "CALL apoc.when($neodash_activity_instance='' and not $neodash_activity='',\n'MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue) where p_act.name=$a\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nWITH g,p_act,p_ai,p_aicr,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH g,p_act,p_ai,p_aicr,ai,aic,\napoc.create.vRelationship(p_act,\"HAS\",{type:\"logical\"},ai) as r1,\napoc.create.vRelationship(ai,\"HAS_ACTIVITY\",{type:\"logical\"},g) as r2,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r3\nwith g,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3\nMATCH(p_act:ActivityValue)-[R3:HAS_GROUPING]->(g:ActivityGrouping)-[R4:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R5:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R6:IN_GROUP]->(p_agrp:ActivityGroupValue)\nwith g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3,R3,R4,R5,R6\nMATCH (p_ai:ActivityInstanceValue)-[R7:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nOPTIONAL MATCH(p_aitm1)<-[R9:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R10:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R11:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R12:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R13:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R14:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R17:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,r1,r2,r3,p_aitm1,p_aitmc1,p_aicp,p_aicpp,R3,R4,R5,R6,R15,R16,R17,\np_aitm1 as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R17 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,r1,r2,r3,aitm1,aitmc1,aicp,aicpp,R3,R4,R5,R6,R15,R16,R17,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R15 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r6,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r7,\nCASE WHEN (R17 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r8\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,R15,R16,R17\nOPTIONAL MATCH (p_aitm1)-[R18]->(p_ct2cd:CTTermRoot)-[R19:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R20:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R21:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R22:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,ct2,unit_ct,role,dtype,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r9, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r10,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r11,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r12\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_unitdef,ct2,unit_ct,role,dtype\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct g as g,\nsg as sg,\np_agrp as p_agrp ,\np_asgrp as p_asgrp,\np_act as p_act,\np_ai as p_ai,\nai as ai,\naic as aic,\naicp as aicp,\naicpp as aicpp,\naitm1 as aitm1,\naitmc1 as aitmc1,\nr1 as r1,\nr2 as r2,\nr3 as r3,\nr4 as r4,\nr5 as r5,\nr6 as r6,\nr7 as r7,\nr8 as r8,\nr9 as r9,\nr10 as r10,\nr11 as r11,\nr12 as r12,\nR3 as R3,\nR4 as R4,\nR5 as R5,\nR6 as R6,\np_ct2cd as p_ct2cd,\np_unitdefr as p_unitdefr,\nct2 as ct2,\nunit_ct as unit_ct,\nrole as role,\ndtype as dtype,\np_cl_cdisc as p_cl_cdisc,\np_cl_sponsor as p_cl_sponsor,\nunit_cld as unit_cld\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,p_cl_cdisc,p_cl_sponsor,unit_cld,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,cl,unit_cl,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r13,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r14\nRETURN g,sg,p_agrp,p_asgrp,p_act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,R3,R4,R5,R6,ct2,unit_ct,role,dtype,unit_cl,cl',\n'MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue) where p_ai.adam_param_code=$b\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) \nWITH g,p_act,p_ai,p_aicr,\napoc.create.vNode([\"ActivityInstance\"],properties(p_ai)) as ai,\napoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aic)) as aic\nWITH g,p_act,p_ai,p_aicr,ai,aic,\napoc.create.vRelationship(p_act,\"HAS\",{type:\"logical\"},ai) as r1,\napoc.create.vRelationship(ai,\"HAS_ACTIVITY\",{type:\"logical\"},g) as r2,\napoc.create.vRelationship(ai,\"OF_CLASS\",{type:\"logical\"},aic) as r3\nwith g,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3\nMATCH(p_act:ActivityValue)-[R3:HAS_GROUPING]->(g:ActivityGrouping)-[R4:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R5:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R6:IN_GROUP]->(p_agrp:ActivityGroupValue)\nwith g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,ai,aic,r1,r2,r3,R3,R4,R5,R6\nMATCH (p_ai:ActivityInstanceValue)-[R7:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nOPTIONAL MATCH(p_aitm1)<-[R9:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R10:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R11:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R12:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R13:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R14:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R17:HAS_ITEM_CLASS]-(p_aicrpp) \nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,r1,r2,r3,p_aitm1,p_aitmc1,p_aicp,p_aicpp,R3,R4,R5,R6,R15,R16,R17,\np_aitm1 as aitm1,\napoc.create.vNode([\"ActivityItemClass\"],properties(p_aitmc1)) as aitmc1,\nCASE WHEN R16 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicp)) END as aicp,\nCASE WHEN R17 is not null THEN apoc.create.vNode([\"ActivityInstanceClass\"],properties(p_aicpp)) END as aicpp\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,r1,r2,r3,aitm1,aitmc1,aicp,aicpp,R3,R4,R5,R6,R15,R16,R17,\napoc.create.vRelationship(ai,\"HAS\",{type:\"logical\"},aitm1) as r4,\napoc.create.vRelationship(aitm1,\"OF_CLASS\",{type:\"logical\"},aitmc1) as r5,\nCASE WHEN (R15 is not null) THEN \napoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aic) END as r6,\nCASE WHEN (R16 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicp) END as r7,\nCASE WHEN (R17 is not null) \nTHEN apoc.create.vRelationship(aitmc1,\"OF_CLASS\",{type:\"logical\"},aicpp) END as r8\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aitm1,p_aitmc1,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,R15,R16,R17\nOPTIONAL MATCH (p_aitm1)-[R18]->(p_ct2cd:CTTermRoot)-[R19:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R20:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R21:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R22:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_ROLE]->(p_role_r:CTTermRoot)-[:HAS_NAME_ROOT]->(ctnr_role)-[:LATEST]->(p_role_val), (p_role_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr)-[:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[:HAS_DATA_TYPE]->(p_dtype_r)-[:HAS_NAME_ROOT]->(ctnr_dtype)-[:LATEST]->(p_dtype_val), (p_dtype_r)-[:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[:LATEST]->(p_dtype_attr_val)\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor))) END as ct2,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTTerm\"],properties(p_unitdef)) END as unit_ct,\nCASE WHEN p_role_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_role_val),properties(p_role_attr_val))) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vNode([\"CTTerm\"],apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val))) END as dtype\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_role_r,p_dtype_r,p_ct2_cdisc,p_ct2_sponsor,p_unitdef,p_role_val,p_role_attr_val,p_dtype_val,p_dtype_attr_val,ct2,unit_ct,role,dtype,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},ct2) END as r9, \nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(aitm1,\"FOR\",{type:\"logical\"},unit_ct) END as r10,\nCASE WHEN p_role_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_ROLE\",{type:\"logical\"},role)END as r11,\nCASE WHEN p_dtype_r is not null THEN apoc.create.vRelationship(aitmc1,\"HAS_TYPE\",{type:\"logical\"},dtype) END as r12\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,\np_ct2cd,p_unitdefr,p_unitdef,ct2,unit_ct,role,dtype\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[:HAS_TERM]-(cl_root)-[:HAS_ATTRIBUTES_ROOT]->(clattr2)-[:LATEST]->(unit_cld)\nwith distinct g as g,\nsg as sg,\np_agrp as p_agrp ,\np_asgrp as p_asgrp,\np_act as p_act,\np_ai as p_ai,\nai as ai,\naic as aic,\naicp as aicp,\naicpp as aicpp,\naitm1 as aitm1,\naitmc1 as aitmc1,\nr1 as r1,\nr2 as r2,\nr3 as r3,\nr4 as r4,\nr5 as r5,\nr6 as r6,\nr7 as r7,\nr8 as r8,\nr9 as r9,\nr10 as r10,\nr11 as r11,\nr12 as r12,\nR3 as R3,\nR4 as R4,\nR5 as R5,\nR6 as R6,\np_ct2cd as p_ct2cd,\np_unitdefr as p_unitdefr,\nct2 as ct2,\nunit_ct as unit_ct,\nrole as role,\ndtype as dtype,\np_cl_cdisc as p_cl_cdisc,\np_cl_sponsor as p_cl_sponsor,\nunit_cld as unit_cld\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,p_cl_cdisc,p_cl_sponsor,unit_cld,\nCASE WHEN p_ct2cd is not null THEN apoc.create.vNode([\"CTCodeList\"],apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor))) END as cl,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vNode([\"CTCodeList\"],properties(unit_cld)) END as unit_cl\nWITH g,sg,p_agrp,p_asgrp,p_act,p_ai,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,R3,R4,R5,R6,p_ct2cd,p_unitdefr,ct2,unit_ct,role,dtype,cl,unit_cl,\nCASE WHEN p_ct2cd is not null THEN\napoc.create.vRelationship(cl,\"HAS\",{type:\"logical\"},ct2) END as r13,\nCASE WHEN p_unitdefr is not null THEN\napoc.create.vRelationship(unit_ct,\"HAS\",{type:\"logical\"},unit_cl) END as r14\nRETURN g,sg,p_agrp,p_asgrp,p_act,ai,aic,aicp,aicpp,aitm1,aitmc1,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,R3,R4,R5,R6,ct2,unit_ct,role,dtype,unit_cl,cl',{a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nRETURN \nvalue.g,\nvalue.sg,\nvalue.p_agrp,\nvalue.p_asgrp,\nvalue.p_act,\nvalue.ai,\nvalue.aic,\nvalue.aicp,\nvalue.aicpp,\nvalue.aitm1,\nvalue.aitmc1,\nvalue.r1,\nvalue.r2,\nvalue.r3,\nvalue.r4,\nvalue.r5,\nvalue.r6,\nvalue.r7,\nvalue.r8,\nvalue.r9,\nvalue.r10,\nvalue.r11,\nvalue.r12,\nvalue.r13,\nvalue.r14,\nvalue.R3,\nvalue.R4,\nvalue.R5,\nvalue.R6,\nvalue.ct2,\nvalue.unit_ct,\nvalue.role,\nvalue.dtype,\nvalue.unit_cl,\nvalue.cl",
          "width": 6,
          "height": 3,
          "x": 0,
          "y": 7,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "uid",
            "ActivityValidGroup": "uid",
            "TemplateParameterTermValue": "name",
            "ConceptValue": "name",
            "ActivityGroupValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstance": "name",
            "ActivityInstanceClass": "name",
            "ActivityItem": "name",
            "ActivityItemClass": "name",
            "HAS": "(label)",
            "HAS_ACTIVITY": "(label)",
            "OF_CLASS": "(label)",
            "FOR": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_TYPE": "(label)",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "CTTerm": "name",
            "CTCodeList": "(label)"
          },
          "settings": {
            "nodePositions": {},
            "nodeColorScheme": "paired",
            "relationshipParticles": false,
            "hideSelections": true,
            "frozen": false,
            "refreshButtonEnabled": true,
            "rightClickToExpandNodes": false,
            "layout": "force-directed",
            "fullscreenEnabled": true,
            "downloadImageEnabled": true,
            "enableEditing": false,
            "showPropertiesOnHover": true,
            "autorun": true,
            "lockable": true
          },
          "id": "7f8f6e8f-046f-45a7-a8da-cedcd6c8b537",
          "database": "mdrdb14",
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected"
            ],
            [
              "ActivityInstance",
              "topic_code",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClass",
              "name",
              "definition",
              "is_domain_specific",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClass",
              "name",
              "definition",
              "mandatory",
              "nci_concept_id",
              "order"
            ],
            [
              "HAS",
              "type"
            ],
            [
              "HAS_ACTIVITY",
              "type"
            ],
            [
              "OF_CLASS",
              "type"
            ],
            [
              "FOR",
              "type"
            ],
            [
              "HAS_ROLE",
              "type"
            ],
            [
              "HAS_TYPE",
              "type"
            ],
            [
              "HAS_GROUPING"
            ],
            [
              "IN_SUBGROUP"
            ],
            [
              "HAS_GROUP"
            ],
            [
              "IN_GROUP"
            ],
            [
              "CTTerm",
              "preferred_term",
              "concept_id",
              "synonyms",
              "name",
              "code_submission_value",
              "name_sentence_case",
              "definition",
              "name_submission_value",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "CTCodeList",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ]
          ]
        },
        {
          "title": "Activity Class",
          "query": "MATCH (p_ai:ActivityInstanceValue)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(n:ActivityInstanceClassValue) with n where toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 3,
          "height": 1,
          "x": 3,
          "y": 2,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Custom Query",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": false,
            "entityType": "activityinstanceclassvalue_name_subtype",
            "parameterName": "neodash_activityinstanceclassvalue_name_subtype"
          },
          "id": "a5d49942-7b13-496b-9bfd-536eaf877be5",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Activity in tabular format",
          "query": "CALL apoc.when($neodash_activity_instance='' and not $neodash_activity='','MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name=$a\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_act.name as Activity,\np_ai.adam_param_code as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn ActivityGroup,\nActivitySubGroup,\nActivity,\n`Activity Instance`,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`','MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem) where p_ai.adam_param_code=$b\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) \nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_act.name as Activity,\np_ai.adam_param_code as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn ActivityGroup,\nActivitySubGroup,\nActivity,\n`Activity Instance`,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`',{a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nRETURN  value.ActivityGroup as ActivityGroup,\nvalue.ActivitySubGroup as ActivitySubGroup,\nvalue.Activity as Activity,\nvalue.`Activity Item Class` as `Activity Item Class` ,\nvalue.Term as Term,\nvalue.`Code List` as `Code List`,\nvalue.Role as Role,\nvalue.`Data Type` as `Data Type`",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 5,
          "type": "table",
          "selection": {},
          "settings": {
            "compact": true,
            "columnWidths": "[0.6,0.6,0.5,0.6,1,1,0.5,0.5]",
            "autorun": true
          },
          "id": "9b28167f-7b58-4d41-8122-5201a121613d",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Reset Instance selection",
          "query": "RETURN true;",
          "width": 3,
          "height": 1,
          "x": 9,
          "y": 4,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity_instance",
            "parameterName": "neodash_activity_instance",
            "clearParameterOnFieldClear": false
          },
          "id": "ed5d0f9f-38ec-4005-8909-62ffe34b0c0f",
          "database": "mdrdb14"
        },
        {
          "title": "Reset Activity Selection",
          "query": "RETURN true;",
          "width": 3,
          "height": 1,
          "x": 9,
          "y": 3,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity",
            "parameterName": "neodash_activity",
            "clearParameterOnFieldClear": false
          },
          "id": "31acefab-caa9-4c2b-9b7d-ebfbfa080cef",
          "database": "mdrdb14"
        },
        {
          "title": "Activity as a graph-view (physical view)",
          "query": "CALL apoc.when($neodash_activity_instance='' \n               and not $neodash_activity='',\n'MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name=$a\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nreturn distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43',\n'MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue)\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem)  where p_ai.adam_param_code=$b\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nreturn distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43',{a:$neodash_activity,b:$neodash_activity_instance}) YIELD value \nreturn\nvalue.g,\nvalue.sg,\nvalue.p_agrp,\nvalue.p_asgrp,\nvalue.p_act,\nvalue.p_ai,\nvalue.p_aicr,\nvalue.p_aic,\nvalue.p_aitm1,\nvalue.p_aitmc1r,\nvalue.p_aitmc1,\nvalue.p_aicrp,\nvalue.p_aicp,\nvalue.p_aicrpp,\nvalue.p_aicpp,\nvalue.p_ct2cd,\nvalue.ct2cdr,\nvalue.p_ct2_sponsor,\nvalue.ct2att,\nvalue.p_ct2_cdisc,\nvalue.p_unitdefr,\nvalue.p_unitdef,\nvalue.clr,\nvalue.clatt,\nvalue.clattr,\nvalue.p_cl_sponsor,\nvalue.p_cl_cdisc,\nvalue.unit_term,\nvalue.cl_root,\nvalue.clattr2,\nvalue.unit_cld,\nvalue.p_role_r,\nvalue.ctattr,\nvalue.ctnr_role,\nvalue.p_role_val,\nvalue.p_role_attr_val,\nvalue.p_dtype_r,\nvalue.p_dtype_val,\nvalue.ctnr_dtype,\nvalue.p_dtype_attr_val,\nvalue.ctattr_dtype,\nvalue.R1,\nvalue.R2,\nvalue.R3,\nvalue.R4,\nvalue.R5,\nvalue.R6,\nvalue.R8,\nvalue.R9,\nvalue.R10,\nvalue.R11,\nvalue.R12,\nvalue.R13,\nvalue.R14,\nvalue.R15,\nvalue.R16,\nvalue.R17,\nvalue.R18,\nvalue.R19,\nvalue.R20,\nvalue.R21,\nvalue.R22,\nvalue.R23,\nvalue.R24,\nvalue.R25,\nvalue.R26,\nvalue.R27,\nvalue.R28,\nvalue.R29,\nvalue.R30,\nvalue.R31,\nvalue.R32,\nvalue.R33,\nvalue.R34,\nvalue.R35,\nvalue.R36,\nvalue.R37,\nvalue.R38,\nvalue.R39,\nvalue.R40,\nvalue.R41,\nvalue.R42,\nvalue.R43\n",
          "width": 6,
          "height": 3,
          "x": 6,
          "y": 7,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "uid",
            "ActivityValidGroup": "uid",
            "TemplateParameterTermValue": "name",
            "ConceptValue": "name",
            "ActivityGroupValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstanceValue": "name",
            "ActivityInstanceClassRoot": "uid",
            "ActivityInstanceClassValue": "name",
            "ActivityItem": "name",
            "ActivityItemClassRoot": "uid",
            "ActivityItemClassValue": "name",
            "CTTermRoot": "uid",
            "CTTermNameRoot": "uid",
            "CTTermNameValue": "name",
            "CTTermAttributesRoot": "(label)",
            "CTTermAttributesValue": "(label)",
            "CTCodelistRoot": "uid",
            "CTCodelistAttributesRoot": "(label)",
            "CTCodelistNameRoot": "(label)",
            "CTCodelistNameValue": "name",
            "CTCodelistAttributesValue": "name",
            "TemplateParameterTermRoot": "uid",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "HAS_ACTIVITY": "(label)",
            "CONTAINS_ACTIVITY_ITEM": "(label)",
            "HAS_ACTIVITY_ITEM": "(label)",
            "LATEST": "(label)",
            "PARENT_CLASS": "(label)",
            "HAS_CT_TERM": "(label)",
            "HAS_NAME_ROOT": "(label)",
            "HAS_ATTRIBUTES_ROOT": "(label)",
            "HAS_TERM": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_DATA_TYPE": "(label)",
            "ACTIVITY_INSTANCE_CLASS": "(label)",
            "HAS_ITEM_CLASS": "(label)",
            "ConceptRoot": "uid",
            "UnitDefinitionRoot": "uid",
            "UnitDefinitionValue": "name",
            "HAS_CT_DIMENSION": "(label)"
          },
          "settings": {
            "hideSelections": true,
            "frozen": false,
            "nodePositions": {},
            "refreshButtonEnabled": true,
            "nodeColorScheme": "paired",
            "showPropertiesOnHover": true,
            "downloadImageEnabled": true,
            "fullscreenEnabled": true
          },
          "id": "823d3dfb-bce1-4719-9843-cb30524e20f6",
          "database": "mdrdb14",
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected",
              "topic_code",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected",
              "topic_code",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected"
            ],
            [
              "ActivityInstanceValue",
              "topic_code",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClassRoot",
              "uid"
            ],
            [
              "ActivityInstanceClassValue",
              "name",
              "definition",
              "is_domain_specific",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClassRoot",
              "uid"
            ],
            [
              "ActivityItemClassValue",
              "name",
              "definition",
              "mandatory",
              "nci_concept_id",
              "order"
            ],
            [
              "CTTermRoot",
              "concept_id",
              "uid"
            ],
            [
              "CTTermNameRoot",
              "uid"
            ],
            [
              "CTTermNameValue",
              "name",
              "name_sentence_case"
            ],
            [
              "CTTermAttributesRoot"
            ],
            [
              "CTTermAttributesValue",
              "preferred_term",
              "code_submission_value",
              "definition",
              "concept_id",
              "synonyms",
              "name_submission_value"
            ],
            [
              "CTCodelistRoot",
              "uid"
            ],
            [
              "CTCodelistAttributesRoot"
            ],
            [
              "CTCodelistNameRoot"
            ],
            [
              "CTCodelistNameValue",
              "name"
            ],
            [
              "CTCodelistAttributesValue",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ],
            [
              "TemplateParameterTermRoot",
              "uid"
            ],
            [
              "HAS_GROUPING"
            ],
            [
              "IN_SUBGROUP"
            ],
            [
              "HAS_GROUP"
            ],
            [
              "IN_GROUP"
            ],
            [
              "HAS_ACTIVITY"
            ],
            [
              "CONTAINS_ACTIVITY_ITEM"
            ],
            [
              "HAS_ACTIVITY_ITEM"
            ],
            [
              "LATEST"
            ],
            [
              "PARENT_CLASS"
            ],
            [
              "HAS_CT_TERM"
            ],
            [
              "HAS_NAME_ROOT"
            ],
            [
              "HAS_ATTRIBUTES_ROOT"
            ],
            [
              "HAS_TERM",
              "start_date",
              "author_id",
              "order"
            ],
            [
              "HAS_ROLE"
            ],
            [
              "HAS_DATA_TYPE"
            ],
            [
              "ACTIVITY_INSTANCE_CLASS"
            ],
            [
              "HAS_ITEM_CLASS"
            ],
            [
              "ConceptRoot",
              "uid"
            ],
            [
              "UnitDefinitionRoot",
              "uid"
            ],
            [
              "UnitDefinitionValue",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "name_sentence_case",
              "name",
              "comment",
              "definition",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "HAS_CT_DIMENSION"
            ]
          ]
        },
        {
          "id": "c1bb190a-b3a9-4e65-843d-c0ab8c42ba42",
          "title": "List of activities",
          "query": "CALL apoc.case([not $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', \n'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] \nreturn distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', \nnot $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='', 'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and agrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', \nnot $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='', 'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance', \n$neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere agrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',$neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere agrp.name in [$c] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\nnot $neodash_activityinstanceclassvalue_name='' and $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and agrp.name in [$c] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\n$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and  $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aic.name in [$b] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\n$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aic.name in [$b] and agrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\n$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aic.name in [$b] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] and agrp.name in [$c] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\nnot $neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aicp.name in [$a] and aic.name in [$b] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',\n$neodash_activityinstanceclassvalue_name='' and not $neodash_activityinstanceclassvalue_name_subtype='' and not $neodash_activitygroupvalue_name='' and not $neodash_activitysubgroupvalue_name='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue)\nwhere aic.name in [$b] and agrp.name in [$c] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance'],'MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue),\n(ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(aic:ActivityInstanceClassValue),\n(aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(aitmc1:ActivityItemClassValue),\n(aicr)-[R10:PARENT_CLASS]->(aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(aicp:ActivityInstanceClassValue),\n(aicrp)-[R12:PARENT_CLASS]->(aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(aicpp:ActivityInstanceClassValue) \nwhere aicp.name in [$a] and aic.name in [$b] and agrp.name in [$c] and asgrp.name in [$d] return distinct aicp.name as ActivityType, aic.name as ActivitySubType, agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.adam_param_code as ActivityInstance',{a:$neodash_activityinstanceclassvalue_name,    b:$neodash_activityinstanceclassvalue_name_subtype,c:$neodash_activitygroupvalue_name, d:$neodash_activitysubgroupvalue_name}) YIELD value return value.ActivityType as `Activity Type`,value.ActivitySubType as `Activity Sub-Type`, value.ActivityGroup as `Activity Group` ,value.ActivitySubGroup as `Activity SubGroup` , value.Activity as Activity, value.ActivityInstance as `Activity Instance` order by Activity, `Activity Instance`",
          "width": 9,
          "height": 2,
          "x": 0,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": true,
            "styleRules": [
              {
                "field": "",
                "condition": "=",
                "value": "",
                "customization": "row color",
                "customizationValue": "black"
              }
            ],
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Activity",
                "value": "Activity",
                "customization": "set variable",
                "customizationValue": "activity"
              },
              {
                "condition": "Click",
                "field": "Activity Instance",
                "value": "Activity Instance",
                "customization": "set variable",
                "customizationValue": "activity_instance"
              }
            ]
          },
          "database": "mdrdb14",
          "schema": []
        }
      ]
    },
    {
      "title": "Activity Lib (search bottom-up)",
      "reports": [
        {
          "id": "eca14906-56b8-4481-8f2b-7dd0af5ab271",
          "title": "Search activity",
          "query": "MATCH (n:`ActivityValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 10",
          "width": 11,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activityvalue_name",
            "multiSelector": true,
            "overridePropertyDisplayName": false,
            "suggestionLimit": 10,
            "clearParameterOnFieldClear": true,
            "manualPropertyNameSpecification": false,
            "helperText": "Select one or more Activities"
          },
          "database": "mdrdb14",
          "schema": []
        },
        {
          "id": "e0a486e2-b652-4375-b36f-57acf318277c",
          "title": "Groups for selected activity/activities",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name in $neodash_activityvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)\nreturn p_act.name as Activity,\np_agrp.name as Group,\np_asgrp.name as `Sub Group`,\np_ai.adam_param_code as `Activity Instance (ADAM PARAM CODE)`,\np_ai.topic_code as `Activity Instance (TOPIC CODE)`,\n'Show Detail' as Select order by Activity, Group, `Sub Group`",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 1,
          "type": "table",
          "selection": {},
          "settings": {
            "refreshButtonEnabled": false,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Select",
                "value": "Activity Instance (ADAM PARAM CODE)",
                "customization": "set variable",
                "customizationValue": "detail"
              }
            ],
            "columnWidths": "[1,1,1,1,1,0.5]"
          },
          "database": "mdrdb14",
          "schema": []
        },
        {
          "id": "51ddc5ee-2e17-44e1-99f1-8b2f95a8ba21",
          "title": "Activity Instance Detail",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem) where p_ai.adam_param_code=$neodash_detail\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\nCASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\nCASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\nCASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\nwith p_agrp.name as ActivityGroup,\np_asgrp.name as ActivitySubGroup,\np_act.name as Activity,\np_ai.adam_param_code as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\nCASE WHEN ct2 is not null THEN ct2.name ELSE \nCASE WHEN unit_term is not null THEN unit_term.name END END  as terms,\nCASE WHEN ct2 is not null THEN cl.name ELSE \nCASE WHEN unit_cld is not null THEN unit_cld.preferred_term END END as `Code List`,\nrole.name as Role,\ndtype.name as `Data Type`\nreturn ActivityGroup,\nActivitySubGroup,\nActivity,\n`Activity Instance`,\n`Activity Item Class`,\napoc.text.join(collect(terms), \",\") as Term,\n`Code List`,\nRole,\n`Data Type`",
          "width": 12,
          "height": 2,
          "x": 0,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {},
          "database": "mdrdb14",
          "schema": []
        }
      ]
    },
    {
      "title": "Activity to SDTM",
      "reports": [
        {
          "title": "Select SDTM version",
          "query": "match (n1:DataModelIGRoot{uid:'SDTMIG'})-[:HAS_VERSION]->(n:DataModelIGValue) return 'Select' as Click, n.name as IG, n.description as Description, n.effective_date as `Effective Date`, n.version_number as `Version Number` order by `Effective Date` desc\n\n",
          "width": 7,
          "height": 3,
          "x": 5,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "DataModelVersion",
            "propertyType": "version_number",
            "propertyTypeDisplay": "version_number",
            "parameterName": "neodash_datamodelversion_version_number",
            "suggestionLimit": 10,
            "clearParameterOnFieldClear": true,
            "columnWidths": "[1,1,6,1,1]",
            "refreshButtonEnabled": true,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Click",
                "value": "Version Number",
                "customization": "set variable",
                "customizationValue": "sdtmversion"
              }
            ],
            "compact": false
          },
          "id": "2eb83ba7-a1ae-4d83-ac14-55a9d89e19d6",
          "schema": [],
          "database": "mdrdb14"
        },
        {
          "title": "Activity mapped to SDTM",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem) where p_ai.adam_param_code=$neodash_activity_instance_sdtm\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue) \nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43\nMATCH (p_ai:ActivityInstanceValue)-[:CONTAINS_ACTIVITY_ITEM]->(p_aitm1_dom:ActivityItem)<-[:HAS_ACTIVITY_ITEM]-(:ActivityItemClassRoot)-[:MAPS_VARIABLE_CLASS]->(:VariableClass{uid:'DOMAIN'})-[:HAS_INSTANCE]->(:VariableClassInstance)<-[:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetVariableInstance)<-[:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetInstance)<-[:HAS_INSTANCE]-(p_ds:Dataset),(p_aitm1_dom:ActivityItem)-[x]->(y:CTTermRoot)-[:HAS_NAME_ROOT]->(:CTTermNameRoot)-[:LATEST]->(p_ct2_sponsor_dom), (y)-[:HAS_ATTRIBUTES_ROOT]->(:CTTermAttributesRoot)-[:LATEST]->(p_ct2_cdisc_dom)  where p_ds.uid=p_ct2_cdisc_dom.code_submission_value OPTIONAL MATCH(p_aitmc1r)-[R44:MAPS_VARIABLE_CLASS]->(p_varcl:VariableClass)-[R45:HAS_INSTANCE]->(p_varcli:VariableClassInstance)\n,(p_varcli)<-[R46:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dci:DatasetVariableInstance)<-[R47:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dsi:DatasetInstance)<-[R48:HAS_INSTANCE]-(p_ds:Dataset)<-[R49:HAS_DATASET]-(p_dmcat:DataModelCatalogue)-[R50:CONTAINS_VERSION]->(p_dmig:DataModelVersion),(p_dsi)<-[R51:HAS_DATASET]-(p_dmigv:DataModelIGValue)<-[R52:CONTAINS_DATA_MODEL_IG]-(p_dmig) where p_dmigv.version_number=$neodash_sdtmversion \nWITH distinct\np_act.name as Activity,\np_ai.name as `Activity Instance`,\np_aitmc1.name as `Activity Item Class`,\np_varcl.uid as `Variable Class`,\np_dci.label as `SDTMIG Variable`,\np_dsi.label as `SDTMIG Dataset`,\np_aitmc1.order as item_order\nreturn Activity,`Activity Instance`,`Activity Item Class`,`Variable Class`,`SDTMIG Variable`,`SDTMIG Dataset` order by `Activity Instance`, item_order",
          "width": 12,
          "height": 3,
          "x": 0,
          "y": 3,
          "type": "table",
          "selection": {},
          "settings": {},
          "id": "030f513f-dc9d-4692-a08f-a136584db365",
          "schema": [],
          "database": "mdrdb14"
        },
        {
          "id": "0894bb17-3aaa-4c4a-9372-93e95422f362",
          "title": "Select Activity Instance",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_asgrp.name=$neodash_activitysubgroupvalue_name\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)\nreturn p_agrp.name as ActivityGroup, p_asgrp.name as ActivitySubGroup, p_act.name as Activity, p_ai.adam_param_code as ActivityInstance order by Activity\n",
          "width": 5,
          "height": 2,
          "x": 0,
          "y": 1,
          "type": "table",
          "selection": {},
          "settings": {
            "fontSize": 20,
            "actionsRules": [
              {
                "condition": "Click",
                "field": "ActivityInstance",
                "value": "ActivityInstance",
                "customization": "set variable",
                "customizationValue": "activity_instance_sdtm"
              }
            ]
          },
          "schema": []
        },
        {
          "id": "93059873-3ac9-464e-bc2b-72f5fb9ddcdf",
          "title": "Activity with links to SDTM",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) \nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem) where p_ai.adam_param_code=$neodash_activity_instance_sdtm\nMATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\nOPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\nOPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\nOPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\nOPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\nOPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \nOPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\nOPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\nOPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\nOPTIONAL MATCH(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor)\nOPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\nOPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot), (p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\nOPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),  (p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\nWITH distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43\nMATCH (p_ai:ActivityInstanceValue)-[:CONTAINS_ACTIVITY_ITEM]->(p_aitm1_dom:ActivityItem)<-[:HAS_ACTIVITY_ITEM]-(:ActivityItemClassRoot)-[:MAPS_VARIABLE_CLASS]->(:VariableClass{uid:'DOMAIN'})-[:HAS_INSTANCE]->(:VariableClassInstance)<-[:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetVariableInstance)<-[:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(:DatasetInstance)<-[:HAS_INSTANCE]-(p_ds:Dataset),(p_aitm1_dom:ActivityItem)-[x]->(y:CTTermRoot)-[:HAS_NAME_ROOT]->(:CTTermNameRoot)-[:LATEST]->(p_ct2_sponsor_dom), (y)-[:HAS_ATTRIBUTES_ROOT]->(:CTTermAttributesRoot)-[:LATEST]->(p_ct2_cdisc_dom)  where p_ds.uid=p_ct2_cdisc_dom.code_submission_value OPTIONAL MATCH(p_aitmc1r)-[R44:MAPS_VARIABLE_CLASS]->(p_varcl:VariableClass)-[R45:HAS_INSTANCE]->(p_varcli:VariableClassInstance)\n,(p_varcli)<-[R46:IMPLEMENTS_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dci:DatasetVariableInstance)<-[R47:HAS_DATASET_VARIABLE{version_number:$neodash_sdtmversion}]-(p_dsi:DatasetInstance)<-[R48:HAS_INSTANCE]-(p_ds:Dataset)<-[R49:HAS_DATASET]-(p_dmcat:DataModelCatalogue)-[R50:CONTAINS_VERSION]->(p_dmig:DataModelVersion),(p_dsi)<-[R51:HAS_DATASET]-(p_dmigv:DataModelIGValue)<-[R52:CONTAINS_DATA_MODEL_IG]-(p_dmig) where p_dmigv.version_number=$neodash_sdtmversion \nreturn distinct g,sg,p_agrp,p_asgrp,p_act,p_ai,p_aicr,p_aic,p_aitm1,p_aitmc1r,p_aitmc1,p_aicrp,p_aicp,p_aicrpp,p_aicpp,p_ct2cd,ct2cdr,p_ct2_sponsor,ct2att,p_ct2_cdisc,p_unitdefr,p_unitdef,clr,clatt,clattr,p_cl_sponsor,p_cl_cdisc,unit_term,cl_root,clattr2,unit_cld,p_role_r,ctattr,ctnr_role, p_role_val, p_role_attr_val,p_dtype_r,p_dtype_val, ctnr_dtype,p_dtype_attr_val,ctattr_dtype,p_ds,p_varcl,p_varcli,p_dci,p_dsi,p_dmcat,p_dmig, p_dmigv,R1,R2, R3, R4, R5, R6, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41,R42,R43,R44,R45,R46,R47,R48,R49,R50,R51,R52\n\n\n",
          "width": 12,
          "height": 4,
          "x": 0,
          "y": 6,
          "type": "graph",
          "selection": {
            "ActivityGrouping": "uid",
            "ActivityValidGroup": "uid",
            "TemplateParameterTermValue": "name",
            "ConceptValue": "name",
            "ActivityGroupValue": "name",
            "ActivitySubGroupValue": "name",
            "ActivityValue": "name",
            "ActivityInstanceValue": "name",
            "ActivityInstanceClassRoot": "uid",
            "ActivityInstanceClassValue": "name",
            "ActivityItem": "(label)",
            "ActivityItemClassRoot": "uid",
            "ActivityItemClassValue": "name",
            "CTTermRoot": "uid",
            "CTTermNameRoot": "uid",
            "CTTermNameValue": "name",
            "CTTermAttributesRoot": "(label)",
            "CTTermAttributesValue": "(label)",
            "CTCodelistRoot": "uid",
            "CTCodelistAttributesRoot": "(label)",
            "CTCodelistNameRoot": "(label)",
            "CTCodelistNameValue": "name",
            "CTCodelistAttributesValue": "name",
            "TemplateParameterTermRoot": "uid",
            "Dataset": "uid",
            "VariableClass": "uid",
            "VariableClassInstance": "title",
            "DatasetVariableInstance": "title",
            "DatasetInstance": "title",
            "DataModelCatalogue": "name",
            "DataModelVersion": "name",
            "DataModelIGValue": "name",
            "HAS_GROUPING": "(label)",
            "IN_SUBGROUP": "(label)",
            "HAS_GROUP": "(label)",
            "IN_GROUP": "(label)",
            "HAS_ACTIVITY": "(label)",
            "CONTAINS_ACTIVITY_ITEM": "(label)",
            "HAS_ACTIVITY_ITEM": "(label)",
            "LATEST": "(label)",
            "PARENT_CLASS": "(label)",
            "HAS_ITEM_CLASS": "(label)",
            "HAS_CT_TERM": "(label)",
            "HAS_NAME_ROOT": "(label)",
            "HAS_ATTRIBUTES_ROOT": "(label)",
            "HAS_TERM": "(label)",
            "HAS_ROLE": "(label)",
            "HAS_DATA_TYPE": "(label)",
            "ACTIVITY_INSTANCE_CLASS": "(label)",
            "MAPS_VARIABLE_CLASS": "(label)",
            "HAS_INSTANCE": "(label)",
            "IMPLEMENTS_VARIABLE": "(label)",
            "HAS_DATASET_VARIABLE": "(label)",
            "HAS_DATASET": "(label)",
            "CONTAINS_VERSION": "(label)",
            "CONTAINS_DATA_MODEL_IG": "(label)",
            "ConceptRoot": "uid",
            "UnitDefinitionRoot": "uid",
            "UnitDefinitionValue": "name",
            "HAS_CT_DIMENSION": "(label)"
          },
          "settings": {
            "frozen": false,
            "nodePositions": {},
            "defaultNodeSize": 4,
            "showPropertiesOnHover": false,
            "allowDownload": false,
            "hideSelections": true,
            "refreshButtonEnabled": true
          },
          "schema": [
            [
              "ActivityGrouping",
              "uid"
            ],
            [
              "ActivityValidGroup",
              "uid"
            ],
            [
              "TemplateParameterTermValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected",
              "topic_code",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "ConceptValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected",
              "topic_code",
              "adam_param_code",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "comment",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "ActivityGroupValue",
              "name",
              "name_sentence_case",
              "definition"
            ],
            [
              "ActivitySubGroupValue",
              "name",
              "name_sentence_case"
            ],
            [
              "ActivityValue",
              "name",
              "name_sentence_case",
              "definition",
              "is_data_collected"
            ],
            [
              "ActivityInstanceValue",
              "topic_code",
              "adam_param_code",
              "name",
              "name_sentence_case",
              "is_default_selected_for_activity",
              "is_data_sharing",
              "is_required_for_activity",
              "legacy_description",
              "is_legacy_usage"
            ],
            [
              "ActivityInstanceClassRoot",
              "uid"
            ],
            [
              "ActivityInstanceClassValue",
              "is_domain_specific",
              "name",
              "definition",
              "order"
            ],
            [
              "ActivityItem"
            ],
            [
              "ActivityItemClassRoot",
              "uid"
            ],
            [
              "ActivityItemClassValue",
              "nci_concept_id",
              "name",
              "definition",
              "mandatory",
              "order"
            ],
            [
              "CTTermRoot",
              "uid",
              "concept_id"
            ],
            [
              "CTTermNameRoot",
              "uid"
            ],
            [
              "CTTermNameValue",
              "name",
              "name_sentence_case"
            ],
            [
              "CTTermAttributesRoot"
            ],
            [
              "CTTermAttributesValue",
              "preferred_term",
              "concept_id",
              "synonyms",
              "code_submission_value",
              "definition",
              "name_submission_value"
            ],
            [
              "CTCodelistRoot",
              "uid"
            ],
            [
              "CTCodelistAttributesRoot"
            ],
            [
              "CTCodelistNameRoot"
            ],
            [
              "CTCodelistNameValue",
              "name"
            ],
            [
              "CTCodelistAttributesValue",
              "preferred_term",
              "synonyms",
              "name",
              "definition",
              "extensible",
              "submission_value"
            ],
            [
              "TemplateParameterTermRoot",
              "uid"
            ],
            [
              "Dataset",
              "uid"
            ],
            [
              "VariableClass",
              "uid"
            ],
            [
              "VariableClassInstance",
              "role",
              "simple_datatype",
              "description",
              "label",
              "title",
              "role_description"
            ],
            [
              "DatasetVariableInstance",
              "core",
              "role",
              "simple_datatype",
              "description",
              "label",
              "title",
              "value_list"
            ],
            [
              "DatasetInstance",
              "description",
              "label",
              "title"
            ],
            [
              "DataModelCatalogue",
              "data_model_type",
              "name"
            ],
            [
              "DataModelVersion",
              "uid",
              "implements_data_model",
              "registration_status",
              "effective_date",
              "name",
              "description",
              "href",
              "label",
              "source",
              "import_date",
              "author_id"
            ],
            [
              "DataModelIGValue",
              "effective_date",
              "name",
              "description",
              "version_number"
            ],
            [
              "HAS_GROUPING"
            ],
            [
              "IN_SUBGROUP"
            ],
            [
              "HAS_GROUP"
            ],
            [
              "IN_GROUP"
            ],
            [
              "HAS_ACTIVITY"
            ],
            [
              "CONTAINS_ACTIVITY_ITEM"
            ],
            [
              "HAS_ACTIVITY_ITEM"
            ],
            [
              "LATEST"
            ],
            [
              "PARENT_CLASS"
            ],
            [
              "HAS_ITEM_CLASS"
            ],
            [
              "HAS_CT_TERM"
            ],
            [
              "HAS_NAME_ROOT"
            ],
            [
              "HAS_ATTRIBUTES_ROOT"
            ],
            [
              "HAS_TERM",
              "start_date",
              "author_id",
              "order"
            ],
            [
              "HAS_ROLE"
            ],
            [
              "HAS_DATA_TYPE"
            ],
            [
              "ACTIVITY_INSTANCE_CLASS"
            ],
            [
              "MAPS_VARIABLE_CLASS"
            ],
            [
              "HAS_INSTANCE"
            ],
            [
              "IMPLEMENTS_VARIABLE",
              "version_number",
              "catalogue"
            ],
            [
              "HAS_DATASET_VARIABLE",
              "version_number",
              "ordinal"
            ],
            [
              "HAS_DATASET",
              "ordinal"
            ],
            [
              "CONTAINS_VERSION"
            ],
            [
              "CONTAINS_DATA_MODEL_IG"
            ],
            [
              "ConceptRoot",
              "uid"
            ],
            [
              "UnitDefinitionRoot",
              "uid"
            ],
            [
              "UnitDefinitionValue",
              "us_conventional_unit",
              "display_unit",
              "si_unit",
              "master_unit",
              "name_sentence_case",
              "name",
              "comment",
              "definition",
              "molecular_weight_conv_expon",
              "conversion_factor_to_master",
              "convertible_unit",
              "legacy_code",
              "order"
            ],
            [
              "HAS_CT_DIMENSION"
            ]
          ]
        },
        {
          "id": "2f622816-92e9-4b7a-b0a9-e96f044f4aaf",
          "title": "Limit list of Activities",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 5,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivitySubGroupValue",
            "suggestionLimit": 20,
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activitysubgroupvalue_name"
          },
          "schema": []
        }
      ]
    },
    {
      "title": "Activity in COSMOS format",
      "reports": [
        {
          "title": "Select Activity Instance",
          "query": "CALL apoc.when($neodash_limit_list='','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue) \nreturn agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.name as `Instance Name`,ai.adam_param_code as ActivityInstance','MATCH(act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(agrp:ActivityGroupValue),\n(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(ai:ActivityInstanceValue) where asgrp.name in [$a] \nreturn agrp.name as ActivityGroup, asgrp.name as ActivitySubGroup, act.name as Activity, ai.name as `Instance Name`, ai.adam_param_code as ActivityInstance ', {a:$neodash_limit_list}) YIELD value\nreturn value.ActivityGroup as `Activity Group`,\nvalue.ActivitySubGroup as `Activity Sub-group`,\nvalue.Activity as Activity,\nvalue.`Instance Name` as `Instance Name`,\nvalue.ActivityInstance as `Activity Instance` order by Activity, `Instance Name`",
          "width": 8,
          "height": 2,
          "x": 4,
          "y": 0,
          "type": "table",
          "selection": {},
          "settings": {
            "type": "Free Text",
            "entityType": "activity_instance",
            "clearParameterOnFieldClear": true,
            "parameterName": "neodash_activity_instance",
            "actionsRules": [
              {
                "condition": "Click",
                "field": "Activity",
                "value": "Activity",
                "customization": "set variable",
                "customizationValue": "cosmos_activity"
              }
            ],
            "compact": true,
            "columnWidths": "[2,2,3,3,1]"
          },
          "id": "12f56131-56de-4ae8-84c2-1336842643e5",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Activity in CDISC COSMOS yaml format",
          "query": "MATCH(p_act:ActivityValue)-[R1:HAS_GROUPING]->(g:ActivityGrouping)-[R2:IN_SUBGROUP]->(sg:ActivityValidGroup)<-[R3:HAS_GROUP]-(p_asgrp:ActivitySubGroupValue),\n(sg)-[R4:IN_GROUP]->(p_agrp:ActivityGroupValue) where p_act.name=$neodash_cosmos_activity\nMATCH(g:ActivityGrouping)<-[R5:HAS_ACTIVITY]-(p_ai:ActivityInstanceValue)-[R6:CONTAINS_ACTIVITY_ITEM]->(p_aitm1:ActivityItem),(p_ai)<-[:LATEST]-(x)\n        MATCH (p_ai)-[R42:ACTIVITY_INSTANCE_CLASS]->(p_aicr:ActivityInstanceClassRoot)-[R43:LATEST]->(p_aic:ActivityInstanceClassValue)\n        OPTIONAL MATCH(p_aitm1)<-[R8:HAS_ACTIVITY_ITEM]-(p_aitmc1r:ActivityItemClassRoot)-[R9:LATEST]->(p_aitmc1:ActivityItemClassValue)\n        OPTIONAL MATCH (p_aicr)-[R10:PARENT_CLASS]->(p_aicrp:ActivityInstanceClassRoot)-[R11:LATEST]->(p_aicp:ActivityInstanceClassValue)\n        OPTIONAL MATCH (p_aicrp)-[R12:PARENT_CLASS]->(p_aicrpp:ActivityInstanceClassRoot)-[R13:LATEST]->(p_aicpp:ActivityInstanceClassValue)\n        OPTIONAL MATCH(p_aitmc1r)<-[R14:HAS_ITEM_CLASS]-(p_aicr)\n        OPTIONAL MATCH(p_aitmc1r)<-[R15:HAS_ITEM_CLASS]-(p_aicrp)\n        OPTIONAL MATCH(p_aitmc1r)<-[R16:HAS_ITEM_CLASS]-(p_aicrpp) \n        OPTIONAL MATCH (p_aitm1)-[R17]->(p_ct2cd:CTTermRoot)-[R18:HAS_NAME_ROOT]->(ct2cdr:CTTermNameRoot)-[R19:LATEST]->(p_ct2_sponsor), (p_ct2cd)-[R20:HAS_ATTRIBUTES_ROOT]->(ct2att:CTTermAttributesRoot)-[R21:LATEST]->(p_ct2_cdisc)\n        OPTIONAL MATCH (p_aitm1)-[:HAS_UNIT_DEFINITION]->(p_unitdefr:UnitDefinitionRoot)-[R22:LATEST]->(p_unitdef:UnitDefinitionValue)\n        OPTIONAL MATCH(p_ct2cd)<-[R23:HAS_TERM]-(clr:CTCodelistRoot)-[R24:HAS_ATTRIBUTES_ROOT]->(clatt:CTCodelistAttributesRoot),(clr)-[R25:HAS_NAME_ROOT]->(clattr:CTCodelistNameRoot)-[R26:LATEST]-(p_cl_sponsor),(clatt)-[R27:LATEST]->(p_cl_cdisc:CTCodelistAttributesValue),(pc:CTPackageCodelist) where ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-(pc) and pc.uid CONTAINS \"SDTM\") or NOT ((p_cl_cdisc)<-[:CONTAINS_ATTRIBUTES]-())\n        OPTIONAL MATCH (p_unitdef:UnitDefinitionValue)-[R28:HAS_CT_DIMENSION]-(unit_term:CTTermRoot)<-[R29:HAS_TERM]-(cl_root)-[R30:HAS_ATTRIBUTES_ROOT]->(clattr2)-[R31:LATEST]->(unit_cld)\n        OPTIONAL MATCH(p_aitmc1)-[R32:HAS_ROLE]->(p_role_r:CTTermRoot),(p_role_r)-[R33:HAS_NAME_ROOT]->(ctnr_role)-[R34:LATEST]->(p_role_val), (p_role_r)-[R35:HAS_ATTRIBUTES_ROOT]->(ctattr)-[R36:LATEST]->(p_role_attr_val)\n        OPTIONAL MATCH(p_aitmc1)-[R37:HAS_DATA_TYPE]->(p_dtype_r),(p_dtype_r)-[R38:HAS_NAME_ROOT]->(ctnr_dtype)-[R39:LATEST]->(p_dtype_val), (p_dtype_r)-[R40:HAS_ATTRIBUTES_ROOT]->(ctattr_dtype)-[R41:LATEST]->(p_dtype_attr_val)\n        with distinct p_act.name as ActivityName, p_aic as aic, p_asgrp as asgrp, p_aitmc1 as aitmc1,p_ai as ai,p_unitdef as unit_ct,\n        CASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_ct2_cdisc),properties(p_ct2_sponsor)) END as ct2,\n        CASE WHEN p_role_r is not null THEN apoc.map.merge(properties(p_role_val),properties(p_role_attr_val)) END as role,\n        CASE WHEN p_dtype_r is not null THEN apoc.map.merge(properties(p_dtype_val),properties(p_dtype_attr_val)) END as dtype,\n        CASE WHEN p_ct2cd is not null THEN apoc.map.merge(properties(p_cl_cdisc),properties(p_cl_sponsor)) END as cl\n        WITH distinct ActivityName,aic,asgrp,aitmc1,ai,unit_ct,ct2,role,dtype,cl,\n        CASE WHEN aitmc1.name='concept_id' THEN ct2.concept_id ELSE \n        CASE WHEN aitmc1.name='test_name_code' THEN ct2.concept_id END END as conceptId,\n        CASE WHEN aitmc1.name='domain' THEN ct2.code_submission_value END as domain\n        with distinct ActivityName,aic,asgrp,aitmc1,ai,unit_ct,ct2,role,dtype,conceptId,domain,\n        CASE when (apoc.any.property(aic,'name')='NumericFinding') THEN 'Quantitative' ELSE \n        CASE WHEN (apoc.any.property(aic,'name')='CategoricFinding') THEN 'Ordinal' ELSE 'Nominal' END END  as aiclass\n        WITH  conceptId, ActivityName, aiclass, asgrp.name as asgrp,  domain,  ai.name as conceptChildNames,  ai.adam_param_code as conceptChildIds, aitmc1,unit_ct,ct2,role,dtype,\n        collect(distinct(coalesce(ct2.code_submission_value,unit_ct.name))) as val_lst\n        WITH conceptId, ActivityName,conceptChildNames, conceptChildIds, aiclass, asgrp,domain,aitmc1,dtype.name_submission_value as dtype,apoc.coll.flatten(collect(val_lst)) as val_list,toInteger(aitmc1.order) as var_order\n        with conceptId, ActivityName,conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order\n        call apoc.load.json('https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/C82590?include=minimal%2CinverseAssociations') yield value\n        with distinct conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,value['inverseAssociations'] as class_concepts\n        with conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,class_concepts,\n      {PERCENTAGE:\"Unit of Fraction\",\n      `RESPIRATORY RATE`:\"Unit Respiratory Rate\",\n       CONCENTRATION:\"Unit of Concentration\",\n      `U_IU Concentration`:\"Unit of Concentration\",\n       TEMPERATURE:\"Unit of Temperature\",\n       WEIGHT:\"Unit of Weight\",\n       PRESSURE:\"Unit of Pressure\",\n       FLOW:\"Unit of Flow Rate\",\n      `VOLUMETRIC FLOW RATE`:\"Unit of Volumetric Flow Rate\",\n      `CELL COUNT`:\"Unit of Cell Count\",\n       LENGTH:\"Unit of Length\",\n      `NO UNIT`:\"No Unit\",\n       TIME:\"Unit of Time\",\n      `BEAT RATE`:\"Unit of Beat Rate\"} as unit_dimension_dict,\n      { DATETIME:'datetime', FLOAT:'decimal', INTEGER:'integer', CTTERM:'string', TEXT:'string'} as dtype_map\n      WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,aitmc1,val_list,var_order,class_concepts,unit_dimension_dict,dtype_map,\n        CASE WHEN aitmc1.name='standard_unit' THEN 'Standard Result Unit' ELSE \n        CASE WHEN aitmc1.name='unit_dimension' THEN unit_dimension_dict[apoc.text.join(val_list,'')] ELSE\n        CASE WHEN aitmc1.name='test_name_code' THEN \"Test Code\" ELSE \n        CASE WHEN aitmc1.name contains 'category' THEN 'Category' ELSE\n        CASE WHEN aitmc1.name='domain' THEN 'Submission Domain' ELSE\n        CASE WHEN aitmc1.name='specimen' THEN 'Biospecimen Type' ELSE\n        apoc.text.join([c in class_concepts WHERE toUpper(c.relatedName)=toUpper(aitmc1.name) | c.relatedName],'') \n        END END END END END END as aitmc1_term, dtype_map[dtype] as dtype\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,apoc.text.replace(aitmc1_term,\" \",\"%20\") as aitmc1_term\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,aitmc1_term\n        call apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/search?fromRecord=0&include=minimal&pageSize=10&term=\"+aitmc1_term+\"&type=match&value=term\") YIELD value\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order, value.concepts[0].code as item_concept_id,aitmc1_term\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,item_concept_id,aitmc1_term\n        call apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/search?fromRecord=0&include=minimal&pageSize=10&term=\"+aitmc1_term+\"&type=startsWith&value=term\") YIELD value\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order, item_concept_id, apoc.text.join([v in value.concepts | v.code],',') as alt_item_concept_id\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,\n        CASE WHEN item_concept_id is null and not alt_item_concept_id is null THEN alt_item_concept_id ELSE  item_concept_id END as item_concept_id\n        WITH conceptId, ActivityName, conceptChildNames, conceptChildIds, aiclass, asgrp,domain,dtype,aitmc1,val_list,var_order,item_concept_id,\n        CASE WHEN item_concept_id='' THEN null ELSE 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+item_concept_id END as href\n        WITH distinct conceptId,ActivityName, conceptChildNames , conceptChildIds, aiclass, asgrp,  domain, aitmc1.name as aitmc1Name, apoc.text.join(collect(distinct dtype),',') as dtypes,apoc.coll.flatten(collect(val_list)) as val_list ,var_order,href,item_concept_id\n       with distinct conceptId,ActivityName, conceptChildNames , conceptChildIds, aiclass, asgrp,domain,dtypes,aitmc1Name,val_list,var_order,href,item_concept_id\nwith distinct collect(conceptId) as conceptId, ActivityName, conceptChildNames , conceptChildIds, aiclass, asgrp, collect(domain) as domain, collect(apoc.map.fromPairs([['dtypes',dtypes],['aitmc1Name',aitmc1Name],['val_list',val_list],['var_order',var_order],['href',href],['item_concept_id',item_concept_id]])) as var_map\nwith conceptId, \nActivityName, \napoc.coll.toSet(collect(conceptChildNames)) as conceptChildNames, \napoc.coll.toSet(collect(conceptChildIds)) as conceptChildIds , \napoc.coll.toSet(collect(aiclass)) as aiclass, \napoc.coll.toSet(collect(asgrp)) as asgrp, \napoc.coll.toSet(domain) as domain,\napoc.coll.toSet(apoc.coll.flatten(collect(var_map))) as var_maps\nwith conceptId, ActivityName, conceptChildNames,conceptChildIds,aiclass,asgrp, domain, var_maps\nUNWIND var_maps as var_map\nwith conceptId, ActivityName, conceptChildNames,conceptChildIds,aiclass,asgrp,domain,\nvar_map['dtypes'] as dtypes,\nvar_map['aitmc1Name'] as aitmc1Name,\nvar_map['val_list'] as val_list,\nvar_map['var_order'] as var_order,\nvar_map['href'] as href,\nvar_map['item_concept_id'] as item_concept_id\nWITH conceptId, ActivityName, conceptChildNames,conceptChildIds,aiclass,asgrp,domain,dtypes,aitmc1Name,apoc.coll.toSet(collect(href)) as href,apoc.coll.toSet(collect(item_concept_id)) as item_concept_id, apoc.coll.toSet(apoc.coll.flatten(collect(val_list))) as val_list, var_order\nWITH conceptId, ActivityName, conceptChildNames,conceptChildIds,aiclass,asgrp,domain,dtypes,aitmc1Name, href,item_concept_id, val_list, var_order where not aitmc1Name in ['domain','test_name_code']\nWITH conceptId, ActivityName, conceptChildNames,conceptChildIds,aiclass,asgrp,domain,\ncollect(apoc.map.fromPairs( [\n                            ['conceptId', apoc.text.join(item_concept_id,',')],\n                            ['href', apoc.text.join(href,',')],\n                            ['shortName', aitmc1Name],\n                            ['dataType',dtypes],\n                            ['exampleSet',val_list],\n                            ['var_order',var_order]\n                            ])) as vars \nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds,aiclass,asgrp,domain, vars where size(conceptId)<2\nwith apoc.text.join(conceptId,',') as conceptId, \nActivityName,\napoc.text.join(conceptChildNames,';') as conceptChildNames,\napoc.text.join(conceptChildIds,';') as conceptChildIds,\naiclass, \nasgrp,\napoc.text.join(domain,';') as domain, \nvars\nWITH CASE when conceptId = \"\" THEN 'C17998' ELSE conceptId END as conceptId,ActivityName, conceptChildNames,conceptChildIds,aiclass, asgrp,domain,vars\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?limit=100&include=minimal\") YIELD value\nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars, value.name as conceptName\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"/parents\") YIELD value\nWITH conceptId, ActivityName, conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars, conceptName,value.code as parentConceptId\nCALL apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?include=definitions\") YIELD value \nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars,conceptName, parentConceptId, value, [def IN value.definitions where def.source=\"NCI\"] as def \nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars,conceptName, parentConceptId, def[0][\"definition\"] as conceptDefinition\nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars,conceptName, parentConceptId,conceptDefinition\ncall apoc.load.json(\"https://api-evsrest.nci.nih.gov/api/v1/concept/ncit/\"+conceptId+\"?include=synonyms\") YIELD value \nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, vars,conceptName,parentConceptId,conceptDefinition,value, apoc.coll.toSet([sym IN value.synonyms where sym.source=\"CDISC\" and sym.termType=\"PT\"| sym.name]) as conceptSynonyms\nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain, apoc.coll.sortMaps(vars, '^var_order') as vars,conceptName,parentConceptId,conceptDefinition,conceptSynonyms\nWITH conceptId, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain,  [v in vars | apoc.map.removeKey(v,'var_order')] as vars,conceptName,parentConceptId,conceptDefinition,conceptSynonyms\nWITH CASE WHEN conceptName='Unknown' THEN null ELSE conceptId END as conceptID, \nActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain,vars, \nCASE WHEN conceptName='Unknown' THEN ActivityName ELSE conceptName END as conceptName ,\nCASE WHEN conceptName='Unknown' THEN null ELSE parentConceptId END as parentConceptId,\nCASE WHEN conceptName='Unknown' THEN null ELSE conceptDefinition END as conceptDefinition,\nCASE WHEN conceptName='Unknown' THEN null ELSE conceptSynonyms END as conceptSynonyms,\nCASE WHEN conceptName='Unknown' THEN null ELSE 'https://ncithesaurus.nci.nih.gov/ncitbrowser/ConceptReport.jsp?dictionary=NCI_Thesaurus&ns=ncit&code='+conceptId END as href\nWITH conceptID, ActivityName,conceptChildNames,conceptChildIds, aiclass,asgrp,domain,vars, conceptName ,parentConceptId,conceptDefinition,conceptSynonyms,href,\napoc.map.fromPairs([ \n                            ['packageDate','2023-04-30'],\n                            ['packageType','bc'],\n                            ['conceptId',conceptID],\n                            ['href', href],\n                            ['parentConceptId',parentConceptId],\n                            ['category',asgrp],\n                            ['shortName',conceptName],\n                            ['synonym',conceptSynonyms],\n                            ['resultScale',aiclass],\n                            ['definition',conceptDefinition],\n                            ['domain',domain],\n                            ['dataElementConcepts', vars]\n                            ]) as activity\n        return distinct activity",
          "width": 12,
          "height": 6,
          "x": 0,
          "y": 2,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 12,
            "refreshButtonEnabled": true,
            "fullscreenEnabled": true,
            "downloadImageEnabled": false,
            "format": "yml"
          },
          "id": "7f0db5bd-72f7-4601-b539-f3e33ebaf4cf",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Limit list (search Activity Sub Group)",
          "query": "MATCH (n:`ActivitySubGroupValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 20",
          "width": 4,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivitySubGroupValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_limit_list",
            "suggestionLimit": 20,
            "clearParameterOnFieldClear": false
          },
          "id": "da467d2e-7244-4aea-9b10-1a9cf22e5367",
          "database": "mdrdb14",
          "schema": []
        },
        {
          "title": "Selected Instance",
          "query": "return $neodash_cosmos_activity\n\n",
          "width": 4,
          "height": 1,
          "x": 0,
          "y": 1,
          "type": "value",
          "selection": {},
          "settings": {
            "fontSize": 20
          },
          "id": "e3ef405e-a126-4873-8006-5299fff510d4",
          "schema": []
        }
      ]
    },
    {
      "title": "Activities used in Studies",
      "reports": [
        {
          "id": "828b7787-ecf9-46d1-b5f8-3f376455f963",
          "title": "Select one or more Activities",
          "query": "MATCH (n:`ActivityValue`) \nWHERE toLower(toString(n.`name`)) CONTAINS toLower($input) \nRETURN DISTINCT n.`name` as value,  n.`name` as display ORDER BY size(toString(value)) ASC LIMIT 5",
          "width": 7,
          "height": 1,
          "x": 0,
          "y": 0,
          "type": "select",
          "selection": {},
          "settings": {
            "type": "Node Property",
            "entityType": "ActivityValue",
            "propertyType": "name",
            "propertyTypeDisplay": "name",
            "parameterName": "neodash_activityvalue_name",
            "multiSelector": true
          },
          "schema": []
        },
        {
          "id": "4e8ce189-76c4-4e7d-847a-06db57caab1a",
          "title": "Studies using above selected activities",
          "query": "MATCH(act:ActivityValue)<-[r1:HAS_SELECTED_ACTIVITY]-(sa:StudyActivity)<-[r2:HAS_STUDY_ACTIVITY]-(s:StudyValue)\nwhere act.name in $neodash_activityvalue_name\nreturn act.name as Activity, s.study_id_prefix as `Study Prefix`, s.study_acronym as `Study Acronym` order by Activity, `Study Prefix`\n\n\n",
          "width": 7,
          "height": 2,
          "x": 0,
          "y": 1,
          "type": "table",
          "selection": {},
          "settings": {}
        }
      ]
    }
  ],
  "parameters": {},
  "extensions": {
    "advanced-charts": {
      "active": true
    },
    "styling": {
      "active": true
    },
    "active": true,
    "activeReducers": [
      "DASHBOARD/EXTENSIONS/QUERY_TRANSLATOR/"
    ],
    "query-translator": {
      "active": true,
      "modelProvider": "OpenAI",
      "settings": {
        "modelType": "gpt-3.5-turbo-16k"
      }
    },
    "actions": {
      "active": true
    }
  }
}